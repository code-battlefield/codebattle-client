// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace CodeBattle.Observer {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Observer {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Observer_Cmd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.Cmd, global::CodeBattle.Observer.Cmd.Builder> internal__static_CodeBattle_Observer_Cmd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Observer_Message__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.Message, global::CodeBattle.Observer.Message.Builder> internal__static_CodeBattle_Observer_Message__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Observer_CreateRoom__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.CreateRoom, global::CodeBattle.Observer.CreateRoom.Builder> internal__static_CodeBattle_Observer_CreateRoom__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Observer_CreateRoomResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.CreateRoomResponse, global::CodeBattle.Observer.CreateRoomResponse.Builder> internal__static_CodeBattle_Observer_CreateRoomResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Observer_JoinRoom__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.JoinRoom, global::CodeBattle.Observer.JoinRoom.Builder> internal__static_CodeBattle_Observer_JoinRoom__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Observer_JoinRoomResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.JoinRoomResponse, global::CodeBattle.Observer.JoinRoomResponse.Builder> internal__static_CodeBattle_Observer_JoinRoomResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Observer_MarineReport__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.MarineReport, global::CodeBattle.Observer.MarineReport.Builder> internal__static_CodeBattle_Observer_MarineReport__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Observer_MarineStatus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.MarineStatus, global::CodeBattle.Observer.MarineStatus.Builder> internal__static_CodeBattle_Observer_MarineStatus__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Observer_CmdResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.CmdResponse, global::CodeBattle.Observer.CmdResponse.Builder> internal__static_CodeBattle_Observer_CmdResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Observer_SenceUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.SenceUpdate, global::CodeBattle.Observer.SenceUpdate.Builder> internal__static_CodeBattle_Observer_SenceUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Observer_CreateMarine__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.CreateMarine, global::CodeBattle.Observer.CreateMarine.Builder> internal__static_CodeBattle_Observer_CreateMarine__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Observer() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg5vYnNlcnZlci5wcm90bxITQ29kZUJhdHRsZS5PYnNlcnZlchoMbWFyaW5l" + 
          "LnByb3RvIroBCgNDbWQSKQoDY21kGAEgAigOMhwuQ29kZUJhdHRsZS5PYnNl" + 
          "cnZlci5DbWRFbnVtEiwKA2NybRgCIAEoCzIfLkNvZGVCYXR0bGUuT2JzZXJ2" + 
          "ZXIuQ3JlYXRlUm9vbRIqCgNqcm0YAyABKAsyHS5Db2RlQmF0dGxlLk9ic2Vy" + 
          "dmVyLkpvaW5Sb29tEi4KA21ydBgEIAEoCzIhLkNvZGVCYXR0bGUuT2JzZXJ2" + 
          "ZXIuTWFyaW5lUmVwb3J0ItIBCgdNZXNzYWdlEi0KA21zZxgBIAIoDjIgLkNv" + 
          "ZGVCYXR0bGUuT2JzZXJ2ZXIuTWVzc2FnZUVudW0SMgoIcmVzcG9uc2UYAiAB" + 
          "KAsyIC5Db2RlQmF0dGxlLk9ic2VydmVyLkNtZFJlc3BvbnNlEjAKBnVwZGF0" + 
          "ZRgDIAEoCzIgLkNvZGVCYXR0bGUuT2JzZXJ2ZXIuU2VuY2VVcGRhdGUSMgoH" + 
          "bWFyaW5lcxgEIAEoCzIhLkNvZGVCYXR0bGUuT2JzZXJ2ZXIuQ3JlYXRlTWFy" + 
          "aW5lIhkKCkNyZWF0ZVJvb20SCwoDbWFwGAEgAigFIkYKEkNyZWF0ZVJvb21S" + 
          "ZXNwb25zZRIKCgJpZBgBIAIoBRIkCgRzaXplGAIgAigLMhYuQ29kZUJhdHRs" + 
          "ZS5WZWN0b3IySW50IhoKCEpvaW5Sb29tEg4KBnJvb21pZBgBIAIoBSJEChBK" + 
          "b2luUm9vbVJlc3BvbnNlEgoKAmlkGAEgAigFEiQKBHNpemUYAiACKAsyFi5D" + 
          "b2RlQmF0dGxlLlZlY3RvcjJJbnQioQIKDE1hcmluZVJlcG9ydBIvCgZyZXBv" + 
          "cnQYASACKA4yHy5Db2RlQmF0dGxlLk9ic2VydmVyLlJlcG9ydEVudW0SMAoF" + 
          "bWlkbGUYAiABKAsyIS5Db2RlQmF0dGxlLk9ic2VydmVyLk1hcmluZVN0YXR1" + 
          "cxIyCgdtYXR0YWNrGAMgASgLMiEuQ29kZUJhdHRsZS5PYnNlcnZlci5NYXJp" + 
          "bmVTdGF0dXMSMgoHbWRhbWFnZRgEIAEoCzIhLkNvZGVCYXR0bGUuT2JzZXJ2" + 
          "ZXIuTWFyaW5lU3RhdHVzEhIKCnJlcG9ydGVySWQYBSABKAUSMgoHbWFyaW5l" + 
          "cxgGIAMoCzIhLkNvZGVCYXR0bGUuT2JzZXJ2ZXIuTWFyaW5lU3RhdHVzImUK" + 
          "DE1hcmluZVN0YXR1cxIKCgJpZBgBIAIoBRIiCgZzdGF0dXMYAiACKA4yEi5D" + 
          "b2RlQmF0dGxlLlN0YXR1cxIlCghwb3NpdGlvbhgDIAIoCzITLkNvZGVCYXR0" + 
          "bGUuVmVjdG9yMiK/AQoLQ21kUmVzcG9uc2USCwoDcmV0GAEgAigFEikKA2Nt" + 
          "ZBgCIAIoDjIcLkNvZGVCYXR0bGUuT2JzZXJ2ZXIuQ21kRW51bRI8Cgtjcm1S" + 
          "ZXNwb25zZRgDIAEoCzInLkNvZGVCYXR0bGUuT2JzZXJ2ZXIuQ3JlYXRlUm9v" + 
          "bVJlc3BvbnNlEjoKC2pybVJlc3BvbnNlGAQgASgLMiUuQ29kZUJhdHRsZS5P" + 
          "YnNlcnZlci5Kb2luUm9vbVJlc3BvbnNlIjEKC1NlbmNlVXBkYXRlEiIKBm1h" + 
          "cmluZRgBIAMoCzISLkNvZGVCYXR0bGUuTWFyaW5lIkEKDENyZWF0ZU1hcmlu" + 
          "ZRINCgVjb2xvchgBIAIoCRIiCgZtYXJpbmUYAiADKAsyEi5Db2RlQmF0dGxl" + 
          "Lk1hcmluZSo5CgdDbWRFbnVtEg4KCmNyZWF0ZXJvb20QABIMCghqb2lucm9v" + 
          "bRABEhAKDG1hcmluZXJlcG9ydBACKkEKC01lc3NhZ2VFbnVtEg8KC2NtZHJl" + 
          "c3BvbnNlEAASDwoLc2VuY2V1cGRhdGUQARIQCgxjcmVhdGVtYXJpbmUQAipM" + 
          "CgpSZXBvcnRFbnVtEgoKBnRvaWRsZRAAEgoKBmRhbWFnZRABEgoKBmZsYXJl" + 
          "cxACEgsKB2ZsYXJlczIQAxINCglndW5hdHRhY2sQBA==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_CodeBattle_Observer_Cmd__Descriptor = Descriptor.MessageTypes[0];
        internal__static_CodeBattle_Observer_Cmd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.Cmd, global::CodeBattle.Observer.Cmd.Builder>(internal__static_CodeBattle_Observer_Cmd__Descriptor,
                new string[] { "Cmd_", "Crm", "Jrm", "Mrt", });
        internal__static_CodeBattle_Observer_Message__Descriptor = Descriptor.MessageTypes[1];
        internal__static_CodeBattle_Observer_Message__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.Message, global::CodeBattle.Observer.Message.Builder>(internal__static_CodeBattle_Observer_Message__Descriptor,
                new string[] { "Msg", "Response", "Update", "Marines", });
        internal__static_CodeBattle_Observer_CreateRoom__Descriptor = Descriptor.MessageTypes[2];
        internal__static_CodeBattle_Observer_CreateRoom__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.CreateRoom, global::CodeBattle.Observer.CreateRoom.Builder>(internal__static_CodeBattle_Observer_CreateRoom__Descriptor,
                new string[] { "Map", });
        internal__static_CodeBattle_Observer_CreateRoomResponse__Descriptor = Descriptor.MessageTypes[3];
        internal__static_CodeBattle_Observer_CreateRoomResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.CreateRoomResponse, global::CodeBattle.Observer.CreateRoomResponse.Builder>(internal__static_CodeBattle_Observer_CreateRoomResponse__Descriptor,
                new string[] { "Id", "Size", });
        internal__static_CodeBattle_Observer_JoinRoom__Descriptor = Descriptor.MessageTypes[4];
        internal__static_CodeBattle_Observer_JoinRoom__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.JoinRoom, global::CodeBattle.Observer.JoinRoom.Builder>(internal__static_CodeBattle_Observer_JoinRoom__Descriptor,
                new string[] { "Roomid", });
        internal__static_CodeBattle_Observer_JoinRoomResponse__Descriptor = Descriptor.MessageTypes[5];
        internal__static_CodeBattle_Observer_JoinRoomResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.JoinRoomResponse, global::CodeBattle.Observer.JoinRoomResponse.Builder>(internal__static_CodeBattle_Observer_JoinRoomResponse__Descriptor,
                new string[] { "Id", "Size", });
        internal__static_CodeBattle_Observer_MarineReport__Descriptor = Descriptor.MessageTypes[6];
        internal__static_CodeBattle_Observer_MarineReport__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.MarineReport, global::CodeBattle.Observer.MarineReport.Builder>(internal__static_CodeBattle_Observer_MarineReport__Descriptor,
                new string[] { "Report", "Midle", "Mattack", "Mdamage", "ReporterId", "Marines", });
        internal__static_CodeBattle_Observer_MarineStatus__Descriptor = Descriptor.MessageTypes[7];
        internal__static_CodeBattle_Observer_MarineStatus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.MarineStatus, global::CodeBattle.Observer.MarineStatus.Builder>(internal__static_CodeBattle_Observer_MarineStatus__Descriptor,
                new string[] { "Id", "Status", "Position", });
        internal__static_CodeBattle_Observer_CmdResponse__Descriptor = Descriptor.MessageTypes[8];
        internal__static_CodeBattle_Observer_CmdResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.CmdResponse, global::CodeBattle.Observer.CmdResponse.Builder>(internal__static_CodeBattle_Observer_CmdResponse__Descriptor,
                new string[] { "Ret", "Cmd", "CrmResponse", "JrmResponse", });
        internal__static_CodeBattle_Observer_SenceUpdate__Descriptor = Descriptor.MessageTypes[9];
        internal__static_CodeBattle_Observer_SenceUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.SenceUpdate, global::CodeBattle.Observer.SenceUpdate.Builder>(internal__static_CodeBattle_Observer_SenceUpdate__Descriptor,
                new string[] { "Marine", });
        internal__static_CodeBattle_Observer_CreateMarine__Descriptor = Descriptor.MessageTypes[10];
        internal__static_CodeBattle_Observer_CreateMarine__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Observer.CreateMarine, global::CodeBattle.Observer.CreateMarine.Builder>(internal__static_CodeBattle_Observer_CreateMarine__Descriptor,
                new string[] { "Color", "Marine", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::CodeBattle.Proto.Marine.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum CmdEnum {
    createroom = 0,
    joinroom = 1,
    marinereport = 2,
  }
  
  public enum MessageEnum {
    cmdresponse = 0,
    senceupdate = 1,
    createmarine = 2,
  }
  
  public enum ReportEnum {
    toidle = 0,
    damage = 1,
    flares = 2,
    flares2 = 3,
    gunattack = 4,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Cmd : pb::GeneratedMessage<Cmd, Cmd.Builder> {
    private Cmd() { }
    private static readonly Cmd defaultInstance = new Cmd().MakeReadOnly();
    private static readonly string[] _cmdFieldNames = new string[] { "cmd", "crm", "jrm", "mrt" };
    private static readonly uint[] _cmdFieldTags = new uint[] { 8, 18, 26, 34 };
    public static Cmd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Cmd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Cmd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_Cmd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Cmd, Cmd.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_Cmd__FieldAccessorTable; }
    }
    
    public const int Cmd_FieldNumber = 1;
    private bool hasCmd_;
    private global::CodeBattle.Observer.CmdEnum cmd_ = global::CodeBattle.Observer.CmdEnum.createroom;
    public bool HasCmd_ {
      get { return hasCmd_; }
    }
    public global::CodeBattle.Observer.CmdEnum Cmd_ {
      get { return cmd_; }
    }
    
    public const int CrmFieldNumber = 2;
    private bool hasCrm;
    private global::CodeBattle.Observer.CreateRoom crm_;
    public bool HasCrm {
      get { return hasCrm; }
    }
    public global::CodeBattle.Observer.CreateRoom Crm {
      get { return crm_ ?? global::CodeBattle.Observer.CreateRoom.DefaultInstance; }
    }
    
    public const int JrmFieldNumber = 3;
    private bool hasJrm;
    private global::CodeBattle.Observer.JoinRoom jrm_;
    public bool HasJrm {
      get { return hasJrm; }
    }
    public global::CodeBattle.Observer.JoinRoom Jrm {
      get { return jrm_ ?? global::CodeBattle.Observer.JoinRoom.DefaultInstance; }
    }
    
    public const int MrtFieldNumber = 4;
    private bool hasMrt;
    private global::CodeBattle.Observer.MarineReport mrt_;
    public bool HasMrt {
      get { return hasMrt; }
    }
    public global::CodeBattle.Observer.MarineReport Mrt {
      get { return mrt_ ?? global::CodeBattle.Observer.MarineReport.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCmd_) return false;
        if (HasCrm) {
          if (!Crm.IsInitialized) return false;
        }
        if (HasJrm) {
          if (!Jrm.IsInitialized) return false;
        }
        if (HasMrt) {
          if (!Mrt.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cmdFieldNames;
      if (hasCmd_) {
        output.WriteEnum(1, field_names[0], (int) Cmd_, Cmd_);
      }
      if (hasCrm) {
        output.WriteMessage(2, field_names[1], Crm);
      }
      if (hasJrm) {
        output.WriteMessage(3, field_names[2], Jrm);
      }
      if (hasMrt) {
        output.WriteMessage(4, field_names[3], Mrt);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCmd_) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Cmd_);
        }
        if (hasCrm) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Crm);
        }
        if (hasJrm) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Jrm);
        }
        if (hasMrt) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Mrt);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Cmd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Cmd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Cmd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Cmd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Cmd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Cmd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Cmd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Cmd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Cmd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Cmd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Cmd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Cmd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Cmd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Cmd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Cmd result;
      
      private Cmd PrepareBuilder() {
        if (resultIsReadOnly) {
          Cmd original = result;
          result = new Cmd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Cmd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Observer.Cmd.Descriptor; }
      }
      
      public override Cmd DefaultInstanceForType {
        get { return global::CodeBattle.Observer.Cmd.DefaultInstance; }
      }
      
      public override Cmd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Cmd) {
          return MergeFrom((Cmd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Cmd other) {
        if (other == global::CodeBattle.Observer.Cmd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCmd_) {
          Cmd_ = other.Cmd_;
        }
        if (other.HasCrm) {
          MergeCrm(other.Crm);
        }
        if (other.HasJrm) {
          MergeJrm(other.Jrm);
        }
        if (other.HasMrt) {
          MergeMrt(other.Mrt);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cmdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cmdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.cmd_, out unknown)) {
                result.hasCmd_ = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::CodeBattle.Observer.CreateRoom.Builder subBuilder = global::CodeBattle.Observer.CreateRoom.CreateBuilder();
              if (result.hasCrm) {
                subBuilder.MergeFrom(Crm);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Crm = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::CodeBattle.Observer.JoinRoom.Builder subBuilder = global::CodeBattle.Observer.JoinRoom.CreateBuilder();
              if (result.hasJrm) {
                subBuilder.MergeFrom(Jrm);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Jrm = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::CodeBattle.Observer.MarineReport.Builder subBuilder = global::CodeBattle.Observer.MarineReport.CreateBuilder();
              if (result.hasMrt) {
                subBuilder.MergeFrom(Mrt);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Mrt = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCmd_ {
       get { return result.hasCmd_; }
      }
      public global::CodeBattle.Observer.CmdEnum Cmd_ {
        get { return result.Cmd_; }
        set { SetCmd_(value); }
      }
      public Builder SetCmd_(global::CodeBattle.Observer.CmdEnum value) {
        PrepareBuilder();
        result.hasCmd_ = true;
        result.cmd_ = value;
        return this;
      }
      public Builder ClearCmd_() {
        PrepareBuilder();
        result.hasCmd_ = false;
        result.cmd_ = global::CodeBattle.Observer.CmdEnum.createroom;
        return this;
      }
      
      public bool HasCrm {
       get { return result.hasCrm; }
      }
      public global::CodeBattle.Observer.CreateRoom Crm {
        get { return result.Crm; }
        set { SetCrm(value); }
      }
      public Builder SetCrm(global::CodeBattle.Observer.CreateRoom value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCrm = true;
        result.crm_ = value;
        return this;
      }
      public Builder SetCrm(global::CodeBattle.Observer.CreateRoom.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCrm = true;
        result.crm_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCrm(global::CodeBattle.Observer.CreateRoom value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCrm &&
            result.crm_ != global::CodeBattle.Observer.CreateRoom.DefaultInstance) {
            result.crm_ = global::CodeBattle.Observer.CreateRoom.CreateBuilder(result.crm_).MergeFrom(value).BuildPartial();
        } else {
          result.crm_ = value;
        }
        result.hasCrm = true;
        return this;
      }
      public Builder ClearCrm() {
        PrepareBuilder();
        result.hasCrm = false;
        result.crm_ = null;
        return this;
      }
      
      public bool HasJrm {
       get { return result.hasJrm; }
      }
      public global::CodeBattle.Observer.JoinRoom Jrm {
        get { return result.Jrm; }
        set { SetJrm(value); }
      }
      public Builder SetJrm(global::CodeBattle.Observer.JoinRoom value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasJrm = true;
        result.jrm_ = value;
        return this;
      }
      public Builder SetJrm(global::CodeBattle.Observer.JoinRoom.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasJrm = true;
        result.jrm_ = builderForValue.Build();
        return this;
      }
      public Builder MergeJrm(global::CodeBattle.Observer.JoinRoom value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasJrm &&
            result.jrm_ != global::CodeBattle.Observer.JoinRoom.DefaultInstance) {
            result.jrm_ = global::CodeBattle.Observer.JoinRoom.CreateBuilder(result.jrm_).MergeFrom(value).BuildPartial();
        } else {
          result.jrm_ = value;
        }
        result.hasJrm = true;
        return this;
      }
      public Builder ClearJrm() {
        PrepareBuilder();
        result.hasJrm = false;
        result.jrm_ = null;
        return this;
      }
      
      public bool HasMrt {
       get { return result.hasMrt; }
      }
      public global::CodeBattle.Observer.MarineReport Mrt {
        get { return result.Mrt; }
        set { SetMrt(value); }
      }
      public Builder SetMrt(global::CodeBattle.Observer.MarineReport value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMrt = true;
        result.mrt_ = value;
        return this;
      }
      public Builder SetMrt(global::CodeBattle.Observer.MarineReport.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMrt = true;
        result.mrt_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMrt(global::CodeBattle.Observer.MarineReport value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMrt &&
            result.mrt_ != global::CodeBattle.Observer.MarineReport.DefaultInstance) {
            result.mrt_ = global::CodeBattle.Observer.MarineReport.CreateBuilder(result.mrt_).MergeFrom(value).BuildPartial();
        } else {
          result.mrt_ = value;
        }
        result.hasMrt = true;
        return this;
      }
      public Builder ClearMrt() {
        PrepareBuilder();
        result.hasMrt = false;
        result.mrt_ = null;
        return this;
      }
    }
    static Cmd() {
      object.ReferenceEquals(global::CodeBattle.Observer.Observer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Message : pb::GeneratedMessage<Message, Message.Builder> {
    private Message() { }
    private static readonly Message defaultInstance = new Message().MakeReadOnly();
    private static readonly string[] _messageFieldNames = new string[] { "marines", "msg", "response", "update" };
    private static readonly uint[] _messageFieldTags = new uint[] { 34, 8, 18, 26 };
    public static Message DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Message DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Message ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_Message__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Message, Message.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_Message__FieldAccessorTable; }
    }
    
    public const int MsgFieldNumber = 1;
    private bool hasMsg;
    private global::CodeBattle.Observer.MessageEnum msg_ = global::CodeBattle.Observer.MessageEnum.cmdresponse;
    public bool HasMsg {
      get { return hasMsg; }
    }
    public global::CodeBattle.Observer.MessageEnum Msg {
      get { return msg_; }
    }
    
    public const int ResponseFieldNumber = 2;
    private bool hasResponse;
    private global::CodeBattle.Observer.CmdResponse response_;
    public bool HasResponse {
      get { return hasResponse; }
    }
    public global::CodeBattle.Observer.CmdResponse Response {
      get { return response_ ?? global::CodeBattle.Observer.CmdResponse.DefaultInstance; }
    }
    
    public const int UpdateFieldNumber = 3;
    private bool hasUpdate;
    private global::CodeBattle.Observer.SenceUpdate update_;
    public bool HasUpdate {
      get { return hasUpdate; }
    }
    public global::CodeBattle.Observer.SenceUpdate Update {
      get { return update_ ?? global::CodeBattle.Observer.SenceUpdate.DefaultInstance; }
    }
    
    public const int MarinesFieldNumber = 4;
    private bool hasMarines;
    private global::CodeBattle.Observer.CreateMarine marines_;
    public bool HasMarines {
      get { return hasMarines; }
    }
    public global::CodeBattle.Observer.CreateMarine Marines {
      get { return marines_ ?? global::CodeBattle.Observer.CreateMarine.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMsg) return false;
        if (HasResponse) {
          if (!Response.IsInitialized) return false;
        }
        if (HasUpdate) {
          if (!Update.IsInitialized) return false;
        }
        if (HasMarines) {
          if (!Marines.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _messageFieldNames;
      if (hasMsg) {
        output.WriteEnum(1, field_names[1], (int) Msg, Msg);
      }
      if (hasResponse) {
        output.WriteMessage(2, field_names[2], Response);
      }
      if (hasUpdate) {
        output.WriteMessage(3, field_names[3], Update);
      }
      if (hasMarines) {
        output.WriteMessage(4, field_names[0], Marines);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMsg) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Msg);
        }
        if (hasResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Response);
        }
        if (hasUpdate) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Update);
        }
        if (hasMarines) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Marines);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Message ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Message ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Message ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Message ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Message ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Message ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Message ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Message ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Message ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Message ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Message MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Message prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Message, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Message cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Message result;
      
      private Message PrepareBuilder() {
        if (resultIsReadOnly) {
          Message original = result;
          result = new Message();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Message MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Observer.Message.Descriptor; }
      }
      
      public override Message DefaultInstanceForType {
        get { return global::CodeBattle.Observer.Message.DefaultInstance; }
      }
      
      public override Message BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Message) {
          return MergeFrom((Message) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Message other) {
        if (other == global::CodeBattle.Observer.Message.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMsg) {
          Msg = other.Msg;
        }
        if (other.HasResponse) {
          MergeResponse(other.Response);
        }
        if (other.HasUpdate) {
          MergeUpdate(other.Update);
        }
        if (other.HasMarines) {
          MergeMarines(other.Marines);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_messageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _messageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.msg_, out unknown)) {
                result.hasMsg = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::CodeBattle.Observer.CmdResponse.Builder subBuilder = global::CodeBattle.Observer.CmdResponse.CreateBuilder();
              if (result.hasResponse) {
                subBuilder.MergeFrom(Response);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Response = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::CodeBattle.Observer.SenceUpdate.Builder subBuilder = global::CodeBattle.Observer.SenceUpdate.CreateBuilder();
              if (result.hasUpdate) {
                subBuilder.MergeFrom(Update);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Update = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::CodeBattle.Observer.CreateMarine.Builder subBuilder = global::CodeBattle.Observer.CreateMarine.CreateBuilder();
              if (result.hasMarines) {
                subBuilder.MergeFrom(Marines);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Marines = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMsg {
       get { return result.hasMsg; }
      }
      public global::CodeBattle.Observer.MessageEnum Msg {
        get { return result.Msg; }
        set { SetMsg(value); }
      }
      public Builder SetMsg(global::CodeBattle.Observer.MessageEnum value) {
        PrepareBuilder();
        result.hasMsg = true;
        result.msg_ = value;
        return this;
      }
      public Builder ClearMsg() {
        PrepareBuilder();
        result.hasMsg = false;
        result.msg_ = global::CodeBattle.Observer.MessageEnum.cmdresponse;
        return this;
      }
      
      public bool HasResponse {
       get { return result.hasResponse; }
      }
      public global::CodeBattle.Observer.CmdResponse Response {
        get { return result.Response; }
        set { SetResponse(value); }
      }
      public Builder SetResponse(global::CodeBattle.Observer.CmdResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResponse = true;
        result.response_ = value;
        return this;
      }
      public Builder SetResponse(global::CodeBattle.Observer.CmdResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasResponse = true;
        result.response_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResponse(global::CodeBattle.Observer.CmdResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasResponse &&
            result.response_ != global::CodeBattle.Observer.CmdResponse.DefaultInstance) {
            result.response_ = global::CodeBattle.Observer.CmdResponse.CreateBuilder(result.response_).MergeFrom(value).BuildPartial();
        } else {
          result.response_ = value;
        }
        result.hasResponse = true;
        return this;
      }
      public Builder ClearResponse() {
        PrepareBuilder();
        result.hasResponse = false;
        result.response_ = null;
        return this;
      }
      
      public bool HasUpdate {
       get { return result.hasUpdate; }
      }
      public global::CodeBattle.Observer.SenceUpdate Update {
        get { return result.Update; }
        set { SetUpdate(value); }
      }
      public Builder SetUpdate(global::CodeBattle.Observer.SenceUpdate value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUpdate = true;
        result.update_ = value;
        return this;
      }
      public Builder SetUpdate(global::CodeBattle.Observer.SenceUpdate.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUpdate = true;
        result.update_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUpdate(global::CodeBattle.Observer.SenceUpdate value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUpdate &&
            result.update_ != global::CodeBattle.Observer.SenceUpdate.DefaultInstance) {
            result.update_ = global::CodeBattle.Observer.SenceUpdate.CreateBuilder(result.update_).MergeFrom(value).BuildPartial();
        } else {
          result.update_ = value;
        }
        result.hasUpdate = true;
        return this;
      }
      public Builder ClearUpdate() {
        PrepareBuilder();
        result.hasUpdate = false;
        result.update_ = null;
        return this;
      }
      
      public bool HasMarines {
       get { return result.hasMarines; }
      }
      public global::CodeBattle.Observer.CreateMarine Marines {
        get { return result.Marines; }
        set { SetMarines(value); }
      }
      public Builder SetMarines(global::CodeBattle.Observer.CreateMarine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMarines = true;
        result.marines_ = value;
        return this;
      }
      public Builder SetMarines(global::CodeBattle.Observer.CreateMarine.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMarines = true;
        result.marines_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMarines(global::CodeBattle.Observer.CreateMarine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMarines &&
            result.marines_ != global::CodeBattle.Observer.CreateMarine.DefaultInstance) {
            result.marines_ = global::CodeBattle.Observer.CreateMarine.CreateBuilder(result.marines_).MergeFrom(value).BuildPartial();
        } else {
          result.marines_ = value;
        }
        result.hasMarines = true;
        return this;
      }
      public Builder ClearMarines() {
        PrepareBuilder();
        result.hasMarines = false;
        result.marines_ = null;
        return this;
      }
    }
    static Message() {
      object.ReferenceEquals(global::CodeBattle.Observer.Observer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CreateRoom : pb::GeneratedMessage<CreateRoom, CreateRoom.Builder> {
    private CreateRoom() { }
    private static readonly CreateRoom defaultInstance = new CreateRoom().MakeReadOnly();
    private static readonly string[] _createRoomFieldNames = new string[] { "map" };
    private static readonly uint[] _createRoomFieldTags = new uint[] { 8 };
    public static CreateRoom DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateRoom DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CreateRoom ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_CreateRoom__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateRoom, CreateRoom.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_CreateRoom__FieldAccessorTable; }
    }
    
    public const int MapFieldNumber = 1;
    private bool hasMap;
    private int map_;
    public bool HasMap {
      get { return hasMap; }
    }
    public int Map {
      get { return map_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMap) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _createRoomFieldNames;
      if (hasMap) {
        output.WriteInt32(1, field_names[0], Map);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMap) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Map);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreateRoom ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateRoom ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateRoom ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateRoom ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateRoom ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateRoom ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateRoom ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateRoom ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateRoom ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateRoom ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CreateRoom MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateRoom prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CreateRoom, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CreateRoom cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CreateRoom result;
      
      private CreateRoom PrepareBuilder() {
        if (resultIsReadOnly) {
          CreateRoom original = result;
          result = new CreateRoom();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CreateRoom MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Observer.CreateRoom.Descriptor; }
      }
      
      public override CreateRoom DefaultInstanceForType {
        get { return global::CodeBattle.Observer.CreateRoom.DefaultInstance; }
      }
      
      public override CreateRoom BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateRoom) {
          return MergeFrom((CreateRoom) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateRoom other) {
        if (other == global::CodeBattle.Observer.CreateRoom.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMap) {
          Map = other.Map;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_createRoomFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _createRoomFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMap = input.ReadInt32(ref result.map_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMap {
        get { return result.hasMap; }
      }
      public int Map {
        get { return result.Map; }
        set { SetMap(value); }
      }
      public Builder SetMap(int value) {
        PrepareBuilder();
        result.hasMap = true;
        result.map_ = value;
        return this;
      }
      public Builder ClearMap() {
        PrepareBuilder();
        result.hasMap = false;
        result.map_ = 0;
        return this;
      }
    }
    static CreateRoom() {
      object.ReferenceEquals(global::CodeBattle.Observer.Observer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CreateRoomResponse : pb::GeneratedMessage<CreateRoomResponse, CreateRoomResponse.Builder> {
    private CreateRoomResponse() { }
    private static readonly CreateRoomResponse defaultInstance = new CreateRoomResponse().MakeReadOnly();
    private static readonly string[] _createRoomResponseFieldNames = new string[] { "id", "size" };
    private static readonly uint[] _createRoomResponseFieldTags = new uint[] { 8, 18 };
    public static CreateRoomResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateRoomResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CreateRoomResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_CreateRoomResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateRoomResponse, CreateRoomResponse.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_CreateRoomResponse__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int SizeFieldNumber = 2;
    private bool hasSize;
    private global::CodeBattle.Vector2Int size_;
    public bool HasSize {
      get { return hasSize; }
    }
    public global::CodeBattle.Vector2Int Size {
      get { return size_ ?? global::CodeBattle.Vector2Int.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasSize) return false;
        if (!Size.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _createRoomResponseFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasSize) {
        output.WriteMessage(2, field_names[1], Size);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasSize) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Size);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreateRoomResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateRoomResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateRoomResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateRoomResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateRoomResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateRoomResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateRoomResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateRoomResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateRoomResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateRoomResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CreateRoomResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateRoomResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CreateRoomResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CreateRoomResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CreateRoomResponse result;
      
      private CreateRoomResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CreateRoomResponse original = result;
          result = new CreateRoomResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CreateRoomResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Observer.CreateRoomResponse.Descriptor; }
      }
      
      public override CreateRoomResponse DefaultInstanceForType {
        get { return global::CodeBattle.Observer.CreateRoomResponse.DefaultInstance; }
      }
      
      public override CreateRoomResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateRoomResponse) {
          return MergeFrom((CreateRoomResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateRoomResponse other) {
        if (other == global::CodeBattle.Observer.CreateRoomResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasSize) {
          MergeSize(other.Size);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_createRoomResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _createRoomResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              global::CodeBattle.Vector2Int.Builder subBuilder = global::CodeBattle.Vector2Int.CreateBuilder();
              if (result.hasSize) {
                subBuilder.MergeFrom(Size);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Size = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasSize {
       get { return result.hasSize; }
      }
      public global::CodeBattle.Vector2Int Size {
        get { return result.Size; }
        set { SetSize(value); }
      }
      public Builder SetSize(global::CodeBattle.Vector2Int value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSize = true;
        result.size_ = value;
        return this;
      }
      public Builder SetSize(global::CodeBattle.Vector2Int.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSize = true;
        result.size_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSize(global::CodeBattle.Vector2Int value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSize &&
            result.size_ != global::CodeBattle.Vector2Int.DefaultInstance) {
            result.size_ = global::CodeBattle.Vector2Int.CreateBuilder(result.size_).MergeFrom(value).BuildPartial();
        } else {
          result.size_ = value;
        }
        result.hasSize = true;
        return this;
      }
      public Builder ClearSize() {
        PrepareBuilder();
        result.hasSize = false;
        result.size_ = null;
        return this;
      }
    }
    static CreateRoomResponse() {
      object.ReferenceEquals(global::CodeBattle.Observer.Observer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class JoinRoom : pb::GeneratedMessage<JoinRoom, JoinRoom.Builder> {
    private JoinRoom() { }
    private static readonly JoinRoom defaultInstance = new JoinRoom().MakeReadOnly();
    private static readonly string[] _joinRoomFieldNames = new string[] { "roomid" };
    private static readonly uint[] _joinRoomFieldTags = new uint[] { 8 };
    public static JoinRoom DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override JoinRoom DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override JoinRoom ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_JoinRoom__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<JoinRoom, JoinRoom.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_JoinRoom__FieldAccessorTable; }
    }
    
    public const int RoomidFieldNumber = 1;
    private bool hasRoomid;
    private int roomid_;
    public bool HasRoomid {
      get { return hasRoomid; }
    }
    public int Roomid {
      get { return roomid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRoomid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _joinRoomFieldNames;
      if (hasRoomid) {
        output.WriteInt32(1, field_names[0], Roomid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRoomid) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Roomid);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static JoinRoom ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinRoom ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinRoom ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinRoom ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinRoom ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinRoom ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static JoinRoom ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static JoinRoom ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static JoinRoom ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinRoom ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private JoinRoom MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(JoinRoom prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<JoinRoom, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(JoinRoom cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private JoinRoom result;
      
      private JoinRoom PrepareBuilder() {
        if (resultIsReadOnly) {
          JoinRoom original = result;
          result = new JoinRoom();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override JoinRoom MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Observer.JoinRoom.Descriptor; }
      }
      
      public override JoinRoom DefaultInstanceForType {
        get { return global::CodeBattle.Observer.JoinRoom.DefaultInstance; }
      }
      
      public override JoinRoom BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is JoinRoom) {
          return MergeFrom((JoinRoom) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(JoinRoom other) {
        if (other == global::CodeBattle.Observer.JoinRoom.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRoomid) {
          Roomid = other.Roomid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_joinRoomFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _joinRoomFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRoomid = input.ReadInt32(ref result.roomid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRoomid {
        get { return result.hasRoomid; }
      }
      public int Roomid {
        get { return result.Roomid; }
        set { SetRoomid(value); }
      }
      public Builder SetRoomid(int value) {
        PrepareBuilder();
        result.hasRoomid = true;
        result.roomid_ = value;
        return this;
      }
      public Builder ClearRoomid() {
        PrepareBuilder();
        result.hasRoomid = false;
        result.roomid_ = 0;
        return this;
      }
    }
    static JoinRoom() {
      object.ReferenceEquals(global::CodeBattle.Observer.Observer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class JoinRoomResponse : pb::GeneratedMessage<JoinRoomResponse, JoinRoomResponse.Builder> {
    private JoinRoomResponse() { }
    private static readonly JoinRoomResponse defaultInstance = new JoinRoomResponse().MakeReadOnly();
    private static readonly string[] _joinRoomResponseFieldNames = new string[] { "id", "size" };
    private static readonly uint[] _joinRoomResponseFieldTags = new uint[] { 8, 18 };
    public static JoinRoomResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override JoinRoomResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override JoinRoomResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_JoinRoomResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<JoinRoomResponse, JoinRoomResponse.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_JoinRoomResponse__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int SizeFieldNumber = 2;
    private bool hasSize;
    private global::CodeBattle.Vector2Int size_;
    public bool HasSize {
      get { return hasSize; }
    }
    public global::CodeBattle.Vector2Int Size {
      get { return size_ ?? global::CodeBattle.Vector2Int.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasSize) return false;
        if (!Size.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _joinRoomResponseFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasSize) {
        output.WriteMessage(2, field_names[1], Size);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasSize) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Size);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static JoinRoomResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinRoomResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinRoomResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinRoomResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinRoomResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinRoomResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static JoinRoomResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static JoinRoomResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static JoinRoomResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinRoomResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private JoinRoomResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(JoinRoomResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<JoinRoomResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(JoinRoomResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private JoinRoomResponse result;
      
      private JoinRoomResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          JoinRoomResponse original = result;
          result = new JoinRoomResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override JoinRoomResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Observer.JoinRoomResponse.Descriptor; }
      }
      
      public override JoinRoomResponse DefaultInstanceForType {
        get { return global::CodeBattle.Observer.JoinRoomResponse.DefaultInstance; }
      }
      
      public override JoinRoomResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is JoinRoomResponse) {
          return MergeFrom((JoinRoomResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(JoinRoomResponse other) {
        if (other == global::CodeBattle.Observer.JoinRoomResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasSize) {
          MergeSize(other.Size);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_joinRoomResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _joinRoomResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              global::CodeBattle.Vector2Int.Builder subBuilder = global::CodeBattle.Vector2Int.CreateBuilder();
              if (result.hasSize) {
                subBuilder.MergeFrom(Size);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Size = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasSize {
       get { return result.hasSize; }
      }
      public global::CodeBattle.Vector2Int Size {
        get { return result.Size; }
        set { SetSize(value); }
      }
      public Builder SetSize(global::CodeBattle.Vector2Int value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSize = true;
        result.size_ = value;
        return this;
      }
      public Builder SetSize(global::CodeBattle.Vector2Int.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSize = true;
        result.size_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSize(global::CodeBattle.Vector2Int value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSize &&
            result.size_ != global::CodeBattle.Vector2Int.DefaultInstance) {
            result.size_ = global::CodeBattle.Vector2Int.CreateBuilder(result.size_).MergeFrom(value).BuildPartial();
        } else {
          result.size_ = value;
        }
        result.hasSize = true;
        return this;
      }
      public Builder ClearSize() {
        PrepareBuilder();
        result.hasSize = false;
        result.size_ = null;
        return this;
      }
    }
    static JoinRoomResponse() {
      object.ReferenceEquals(global::CodeBattle.Observer.Observer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MarineReport : pb::GeneratedMessage<MarineReport, MarineReport.Builder> {
    private MarineReport() { }
    private static readonly MarineReport defaultInstance = new MarineReport().MakeReadOnly();
    private static readonly string[] _marineReportFieldNames = new string[] { "marines", "mattack", "mdamage", "midle", "report", "reporterId" };
    private static readonly uint[] _marineReportFieldTags = new uint[] { 50, 26, 34, 18, 8, 40 };
    public static MarineReport DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MarineReport DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MarineReport ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_MarineReport__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MarineReport, MarineReport.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_MarineReport__FieldAccessorTable; }
    }
    
    public const int ReportFieldNumber = 1;
    private bool hasReport;
    private global::CodeBattle.Observer.ReportEnum report_ = global::CodeBattle.Observer.ReportEnum.toidle;
    public bool HasReport {
      get { return hasReport; }
    }
    public global::CodeBattle.Observer.ReportEnum Report {
      get { return report_; }
    }
    
    public const int MidleFieldNumber = 2;
    private bool hasMidle;
    private global::CodeBattle.Observer.MarineStatus midle_;
    public bool HasMidle {
      get { return hasMidle; }
    }
    public global::CodeBattle.Observer.MarineStatus Midle {
      get { return midle_ ?? global::CodeBattle.Observer.MarineStatus.DefaultInstance; }
    }
    
    public const int MattackFieldNumber = 3;
    private bool hasMattack;
    private global::CodeBattle.Observer.MarineStatus mattack_;
    public bool HasMattack {
      get { return hasMattack; }
    }
    public global::CodeBattle.Observer.MarineStatus Mattack {
      get { return mattack_ ?? global::CodeBattle.Observer.MarineStatus.DefaultInstance; }
    }
    
    public const int MdamageFieldNumber = 4;
    private bool hasMdamage;
    private global::CodeBattle.Observer.MarineStatus mdamage_;
    public bool HasMdamage {
      get { return hasMdamage; }
    }
    public global::CodeBattle.Observer.MarineStatus Mdamage {
      get { return mdamage_ ?? global::CodeBattle.Observer.MarineStatus.DefaultInstance; }
    }
    
    public const int ReporterIdFieldNumber = 5;
    private bool hasReporterId;
    private int reporterId_;
    public bool HasReporterId {
      get { return hasReporterId; }
    }
    public int ReporterId {
      get { return reporterId_; }
    }
    
    public const int MarinesFieldNumber = 6;
    private pbc::PopsicleList<global::CodeBattle.Observer.MarineStatus> marines_ = new pbc::PopsicleList<global::CodeBattle.Observer.MarineStatus>();
    public scg::IList<global::CodeBattle.Observer.MarineStatus> MarinesList {
      get { return marines_; }
    }
    public int MarinesCount {
      get { return marines_.Count; }
    }
    public global::CodeBattle.Observer.MarineStatus GetMarines(int index) {
      return marines_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasReport) return false;
        if (HasMidle) {
          if (!Midle.IsInitialized) return false;
        }
        if (HasMattack) {
          if (!Mattack.IsInitialized) return false;
        }
        if (HasMdamage) {
          if (!Mdamage.IsInitialized) return false;
        }
        foreach (global::CodeBattle.Observer.MarineStatus element in MarinesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _marineReportFieldNames;
      if (hasReport) {
        output.WriteEnum(1, field_names[4], (int) Report, Report);
      }
      if (hasMidle) {
        output.WriteMessage(2, field_names[3], Midle);
      }
      if (hasMattack) {
        output.WriteMessage(3, field_names[1], Mattack);
      }
      if (hasMdamage) {
        output.WriteMessage(4, field_names[2], Mdamage);
      }
      if (hasReporterId) {
        output.WriteInt32(5, field_names[5], ReporterId);
      }
      if (marines_.Count > 0) {
        output.WriteMessageArray(6, field_names[0], marines_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasReport) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Report);
        }
        if (hasMidle) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Midle);
        }
        if (hasMattack) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Mattack);
        }
        if (hasMdamage) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Mdamage);
        }
        if (hasReporterId) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, ReporterId);
        }
        foreach (global::CodeBattle.Observer.MarineStatus element in MarinesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MarineReport ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarineReport ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarineReport ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarineReport ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarineReport ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarineReport ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MarineReport ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MarineReport ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MarineReport ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarineReport ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MarineReport MakeReadOnly() {
      marines_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MarineReport prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MarineReport, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MarineReport cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MarineReport result;
      
      private MarineReport PrepareBuilder() {
        if (resultIsReadOnly) {
          MarineReport original = result;
          result = new MarineReport();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MarineReport MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Observer.MarineReport.Descriptor; }
      }
      
      public override MarineReport DefaultInstanceForType {
        get { return global::CodeBattle.Observer.MarineReport.DefaultInstance; }
      }
      
      public override MarineReport BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MarineReport) {
          return MergeFrom((MarineReport) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MarineReport other) {
        if (other == global::CodeBattle.Observer.MarineReport.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReport) {
          Report = other.Report;
        }
        if (other.HasMidle) {
          MergeMidle(other.Midle);
        }
        if (other.HasMattack) {
          MergeMattack(other.Mattack);
        }
        if (other.HasMdamage) {
          MergeMdamage(other.Mdamage);
        }
        if (other.HasReporterId) {
          ReporterId = other.ReporterId;
        }
        if (other.marines_.Count != 0) {
          result.marines_.Add(other.marines_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_marineReportFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _marineReportFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.report_, out unknown)) {
                result.hasReport = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::CodeBattle.Observer.MarineStatus.Builder subBuilder = global::CodeBattle.Observer.MarineStatus.CreateBuilder();
              if (result.hasMidle) {
                subBuilder.MergeFrom(Midle);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Midle = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::CodeBattle.Observer.MarineStatus.Builder subBuilder = global::CodeBattle.Observer.MarineStatus.CreateBuilder();
              if (result.hasMattack) {
                subBuilder.MergeFrom(Mattack);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Mattack = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::CodeBattle.Observer.MarineStatus.Builder subBuilder = global::CodeBattle.Observer.MarineStatus.CreateBuilder();
              if (result.hasMdamage) {
                subBuilder.MergeFrom(Mdamage);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Mdamage = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasReporterId = input.ReadInt32(ref result.reporterId_);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.marines_, global::CodeBattle.Observer.MarineStatus.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasReport {
       get { return result.hasReport; }
      }
      public global::CodeBattle.Observer.ReportEnum Report {
        get { return result.Report; }
        set { SetReport(value); }
      }
      public Builder SetReport(global::CodeBattle.Observer.ReportEnum value) {
        PrepareBuilder();
        result.hasReport = true;
        result.report_ = value;
        return this;
      }
      public Builder ClearReport() {
        PrepareBuilder();
        result.hasReport = false;
        result.report_ = global::CodeBattle.Observer.ReportEnum.toidle;
        return this;
      }
      
      public bool HasMidle {
       get { return result.hasMidle; }
      }
      public global::CodeBattle.Observer.MarineStatus Midle {
        get { return result.Midle; }
        set { SetMidle(value); }
      }
      public Builder SetMidle(global::CodeBattle.Observer.MarineStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMidle = true;
        result.midle_ = value;
        return this;
      }
      public Builder SetMidle(global::CodeBattle.Observer.MarineStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMidle = true;
        result.midle_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMidle(global::CodeBattle.Observer.MarineStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMidle &&
            result.midle_ != global::CodeBattle.Observer.MarineStatus.DefaultInstance) {
            result.midle_ = global::CodeBattle.Observer.MarineStatus.CreateBuilder(result.midle_).MergeFrom(value).BuildPartial();
        } else {
          result.midle_ = value;
        }
        result.hasMidle = true;
        return this;
      }
      public Builder ClearMidle() {
        PrepareBuilder();
        result.hasMidle = false;
        result.midle_ = null;
        return this;
      }
      
      public bool HasMattack {
       get { return result.hasMattack; }
      }
      public global::CodeBattle.Observer.MarineStatus Mattack {
        get { return result.Mattack; }
        set { SetMattack(value); }
      }
      public Builder SetMattack(global::CodeBattle.Observer.MarineStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMattack = true;
        result.mattack_ = value;
        return this;
      }
      public Builder SetMattack(global::CodeBattle.Observer.MarineStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMattack = true;
        result.mattack_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMattack(global::CodeBattle.Observer.MarineStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMattack &&
            result.mattack_ != global::CodeBattle.Observer.MarineStatus.DefaultInstance) {
            result.mattack_ = global::CodeBattle.Observer.MarineStatus.CreateBuilder(result.mattack_).MergeFrom(value).BuildPartial();
        } else {
          result.mattack_ = value;
        }
        result.hasMattack = true;
        return this;
      }
      public Builder ClearMattack() {
        PrepareBuilder();
        result.hasMattack = false;
        result.mattack_ = null;
        return this;
      }
      
      public bool HasMdamage {
       get { return result.hasMdamage; }
      }
      public global::CodeBattle.Observer.MarineStatus Mdamage {
        get { return result.Mdamage; }
        set { SetMdamage(value); }
      }
      public Builder SetMdamage(global::CodeBattle.Observer.MarineStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMdamage = true;
        result.mdamage_ = value;
        return this;
      }
      public Builder SetMdamage(global::CodeBattle.Observer.MarineStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMdamage = true;
        result.mdamage_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMdamage(global::CodeBattle.Observer.MarineStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMdamage &&
            result.mdamage_ != global::CodeBattle.Observer.MarineStatus.DefaultInstance) {
            result.mdamage_ = global::CodeBattle.Observer.MarineStatus.CreateBuilder(result.mdamage_).MergeFrom(value).BuildPartial();
        } else {
          result.mdamage_ = value;
        }
        result.hasMdamage = true;
        return this;
      }
      public Builder ClearMdamage() {
        PrepareBuilder();
        result.hasMdamage = false;
        result.mdamage_ = null;
        return this;
      }
      
      public bool HasReporterId {
        get { return result.hasReporterId; }
      }
      public int ReporterId {
        get { return result.ReporterId; }
        set { SetReporterId(value); }
      }
      public Builder SetReporterId(int value) {
        PrepareBuilder();
        result.hasReporterId = true;
        result.reporterId_ = value;
        return this;
      }
      public Builder ClearReporterId() {
        PrepareBuilder();
        result.hasReporterId = false;
        result.reporterId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::CodeBattle.Observer.MarineStatus> MarinesList {
        get { return PrepareBuilder().marines_; }
      }
      public int MarinesCount {
        get { return result.MarinesCount; }
      }
      public global::CodeBattle.Observer.MarineStatus GetMarines(int index) {
        return result.GetMarines(index);
      }
      public Builder SetMarines(int index, global::CodeBattle.Observer.MarineStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.marines_[index] = value;
        return this;
      }
      public Builder SetMarines(int index, global::CodeBattle.Observer.MarineStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.marines_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMarines(global::CodeBattle.Observer.MarineStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.marines_.Add(value);
        return this;
      }
      public Builder AddMarines(global::CodeBattle.Observer.MarineStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.marines_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMarines(scg::IEnumerable<global::CodeBattle.Observer.MarineStatus> values) {
        PrepareBuilder();
        result.marines_.Add(values);
        return this;
      }
      public Builder ClearMarines() {
        PrepareBuilder();
        result.marines_.Clear();
        return this;
      }
    }
    static MarineReport() {
      object.ReferenceEquals(global::CodeBattle.Observer.Observer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MarineStatus : pb::GeneratedMessage<MarineStatus, MarineStatus.Builder> {
    private MarineStatus() { }
    private static readonly MarineStatus defaultInstance = new MarineStatus().MakeReadOnly();
    private static readonly string[] _marineStatusFieldNames = new string[] { "id", "position", "status" };
    private static readonly uint[] _marineStatusFieldTags = new uint[] { 8, 26, 16 };
    public static MarineStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MarineStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MarineStatus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_MarineStatus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MarineStatus, MarineStatus.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_MarineStatus__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int StatusFieldNumber = 2;
    private bool hasStatus;
    private global::CodeBattle.Status status_ = global::CodeBattle.Status.Idle;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::CodeBattle.Status Status {
      get { return status_; }
    }
    
    public const int PositionFieldNumber = 3;
    private bool hasPosition;
    private global::CodeBattle.Vector2 position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::CodeBattle.Vector2 Position {
      get { return position_ ?? global::CodeBattle.Vector2.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasStatus) return false;
        if (!hasPosition) return false;
        if (!Position.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _marineStatusFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasStatus) {
        output.WriteEnum(2, field_names[2], (int) Status, Status);
      }
      if (hasPosition) {
        output.WriteMessage(3, field_names[1], Position);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Status);
        }
        if (hasPosition) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Position);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MarineStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarineStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarineStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarineStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarineStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarineStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MarineStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MarineStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MarineStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarineStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MarineStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MarineStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MarineStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MarineStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MarineStatus result;
      
      private MarineStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          MarineStatus original = result;
          result = new MarineStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MarineStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Observer.MarineStatus.Descriptor; }
      }
      
      public override MarineStatus DefaultInstanceForType {
        get { return global::CodeBattle.Observer.MarineStatus.DefaultInstance; }
      }
      
      public override MarineStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MarineStatus) {
          return MergeFrom((MarineStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MarineStatus other) {
        if (other == global::CodeBattle.Observer.MarineStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_marineStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _marineStatusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.status_, out unknown)) {
                result.hasStatus = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              global::CodeBattle.Vector2.Builder subBuilder = global::CodeBattle.Vector2.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::CodeBattle.Status Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::CodeBattle.Status value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = global::CodeBattle.Status.Idle;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::CodeBattle.Vector2 Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::CodeBattle.Vector2 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::CodeBattle.Vector2.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::CodeBattle.Vector2 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::CodeBattle.Vector2.DefaultInstance) {
            result.position_ = global::CodeBattle.Vector2.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
    }
    static MarineStatus() {
      object.ReferenceEquals(global::CodeBattle.Observer.Observer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CmdResponse : pb::GeneratedMessage<CmdResponse, CmdResponse.Builder> {
    private CmdResponse() { }
    private static readonly CmdResponse defaultInstance = new CmdResponse().MakeReadOnly();
    private static readonly string[] _cmdResponseFieldNames = new string[] { "cmd", "crmResponse", "jrmResponse", "ret" };
    private static readonly uint[] _cmdResponseFieldTags = new uint[] { 16, 26, 34, 8 };
    public static CmdResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CmdResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CmdResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_CmdResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CmdResponse, CmdResponse.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_CmdResponse__FieldAccessorTable; }
    }
    
    public const int RetFieldNumber = 1;
    private bool hasRet;
    private int ret_;
    public bool HasRet {
      get { return hasRet; }
    }
    public int Ret {
      get { return ret_; }
    }
    
    public const int CmdFieldNumber = 2;
    private bool hasCmd;
    private global::CodeBattle.Observer.CmdEnum cmd_ = global::CodeBattle.Observer.CmdEnum.createroom;
    public bool HasCmd {
      get { return hasCmd; }
    }
    public global::CodeBattle.Observer.CmdEnum Cmd {
      get { return cmd_; }
    }
    
    public const int CrmResponseFieldNumber = 3;
    private bool hasCrmResponse;
    private global::CodeBattle.Observer.CreateRoomResponse crmResponse_;
    public bool HasCrmResponse {
      get { return hasCrmResponse; }
    }
    public global::CodeBattle.Observer.CreateRoomResponse CrmResponse {
      get { return crmResponse_ ?? global::CodeBattle.Observer.CreateRoomResponse.DefaultInstance; }
    }
    
    public const int JrmResponseFieldNumber = 4;
    private bool hasJrmResponse;
    private global::CodeBattle.Observer.JoinRoomResponse jrmResponse_;
    public bool HasJrmResponse {
      get { return hasJrmResponse; }
    }
    public global::CodeBattle.Observer.JoinRoomResponse JrmResponse {
      get { return jrmResponse_ ?? global::CodeBattle.Observer.JoinRoomResponse.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRet) return false;
        if (!hasCmd) return false;
        if (HasCrmResponse) {
          if (!CrmResponse.IsInitialized) return false;
        }
        if (HasJrmResponse) {
          if (!JrmResponse.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cmdResponseFieldNames;
      if (hasRet) {
        output.WriteInt32(1, field_names[3], Ret);
      }
      if (hasCmd) {
        output.WriteEnum(2, field_names[0], (int) Cmd, Cmd);
      }
      if (hasCrmResponse) {
        output.WriteMessage(3, field_names[1], CrmResponse);
      }
      if (hasJrmResponse) {
        output.WriteMessage(4, field_names[2], JrmResponse);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRet) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Ret);
        }
        if (hasCmd) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Cmd);
        }
        if (hasCrmResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, CrmResponse);
        }
        if (hasJrmResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, JrmResponse);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CmdResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CmdResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CmdResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CmdResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CmdResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CmdResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CmdResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CmdResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CmdResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CmdResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CmdResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CmdResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CmdResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CmdResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CmdResponse result;
      
      private CmdResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CmdResponse original = result;
          result = new CmdResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CmdResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Observer.CmdResponse.Descriptor; }
      }
      
      public override CmdResponse DefaultInstanceForType {
        get { return global::CodeBattle.Observer.CmdResponse.DefaultInstance; }
      }
      
      public override CmdResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CmdResponse) {
          return MergeFrom((CmdResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CmdResponse other) {
        if (other == global::CodeBattle.Observer.CmdResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRet) {
          Ret = other.Ret;
        }
        if (other.HasCmd) {
          Cmd = other.Cmd;
        }
        if (other.HasCrmResponse) {
          MergeCrmResponse(other.CrmResponse);
        }
        if (other.HasJrmResponse) {
          MergeJrmResponse(other.JrmResponse);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cmdResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cmdResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRet = input.ReadInt32(ref result.ret_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.cmd_, out unknown)) {
                result.hasCmd = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              global::CodeBattle.Observer.CreateRoomResponse.Builder subBuilder = global::CodeBattle.Observer.CreateRoomResponse.CreateBuilder();
              if (result.hasCrmResponse) {
                subBuilder.MergeFrom(CrmResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CrmResponse = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::CodeBattle.Observer.JoinRoomResponse.Builder subBuilder = global::CodeBattle.Observer.JoinRoomResponse.CreateBuilder();
              if (result.hasJrmResponse) {
                subBuilder.MergeFrom(JrmResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              JrmResponse = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRet {
        get { return result.hasRet; }
      }
      public int Ret {
        get { return result.Ret; }
        set { SetRet(value); }
      }
      public Builder SetRet(int value) {
        PrepareBuilder();
        result.hasRet = true;
        result.ret_ = value;
        return this;
      }
      public Builder ClearRet() {
        PrepareBuilder();
        result.hasRet = false;
        result.ret_ = 0;
        return this;
      }
      
      public bool HasCmd {
       get { return result.hasCmd; }
      }
      public global::CodeBattle.Observer.CmdEnum Cmd {
        get { return result.Cmd; }
        set { SetCmd(value); }
      }
      public Builder SetCmd(global::CodeBattle.Observer.CmdEnum value) {
        PrepareBuilder();
        result.hasCmd = true;
        result.cmd_ = value;
        return this;
      }
      public Builder ClearCmd() {
        PrepareBuilder();
        result.hasCmd = false;
        result.cmd_ = global::CodeBattle.Observer.CmdEnum.createroom;
        return this;
      }
      
      public bool HasCrmResponse {
       get { return result.hasCrmResponse; }
      }
      public global::CodeBattle.Observer.CreateRoomResponse CrmResponse {
        get { return result.CrmResponse; }
        set { SetCrmResponse(value); }
      }
      public Builder SetCrmResponse(global::CodeBattle.Observer.CreateRoomResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCrmResponse = true;
        result.crmResponse_ = value;
        return this;
      }
      public Builder SetCrmResponse(global::CodeBattle.Observer.CreateRoomResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCrmResponse = true;
        result.crmResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCrmResponse(global::CodeBattle.Observer.CreateRoomResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCrmResponse &&
            result.crmResponse_ != global::CodeBattle.Observer.CreateRoomResponse.DefaultInstance) {
            result.crmResponse_ = global::CodeBattle.Observer.CreateRoomResponse.CreateBuilder(result.crmResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.crmResponse_ = value;
        }
        result.hasCrmResponse = true;
        return this;
      }
      public Builder ClearCrmResponse() {
        PrepareBuilder();
        result.hasCrmResponse = false;
        result.crmResponse_ = null;
        return this;
      }
      
      public bool HasJrmResponse {
       get { return result.hasJrmResponse; }
      }
      public global::CodeBattle.Observer.JoinRoomResponse JrmResponse {
        get { return result.JrmResponse; }
        set { SetJrmResponse(value); }
      }
      public Builder SetJrmResponse(global::CodeBattle.Observer.JoinRoomResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasJrmResponse = true;
        result.jrmResponse_ = value;
        return this;
      }
      public Builder SetJrmResponse(global::CodeBattle.Observer.JoinRoomResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasJrmResponse = true;
        result.jrmResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeJrmResponse(global::CodeBattle.Observer.JoinRoomResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasJrmResponse &&
            result.jrmResponse_ != global::CodeBattle.Observer.JoinRoomResponse.DefaultInstance) {
            result.jrmResponse_ = global::CodeBattle.Observer.JoinRoomResponse.CreateBuilder(result.jrmResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.jrmResponse_ = value;
        }
        result.hasJrmResponse = true;
        return this;
      }
      public Builder ClearJrmResponse() {
        PrepareBuilder();
        result.hasJrmResponse = false;
        result.jrmResponse_ = null;
        return this;
      }
    }
    static CmdResponse() {
      object.ReferenceEquals(global::CodeBattle.Observer.Observer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SenceUpdate : pb::GeneratedMessage<SenceUpdate, SenceUpdate.Builder> {
    private SenceUpdate() { }
    private static readonly SenceUpdate defaultInstance = new SenceUpdate().MakeReadOnly();
    private static readonly string[] _senceUpdateFieldNames = new string[] { "marine" };
    private static readonly uint[] _senceUpdateFieldTags = new uint[] { 10 };
    public static SenceUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SenceUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SenceUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_SenceUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SenceUpdate, SenceUpdate.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_SenceUpdate__FieldAccessorTable; }
    }
    
    public const int MarineFieldNumber = 1;
    private pbc::PopsicleList<global::CodeBattle.Marine> marine_ = new pbc::PopsicleList<global::CodeBattle.Marine>();
    public scg::IList<global::CodeBattle.Marine> MarineList {
      get { return marine_; }
    }
    public int MarineCount {
      get { return marine_.Count; }
    }
    public global::CodeBattle.Marine GetMarine(int index) {
      return marine_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::CodeBattle.Marine element in MarineList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _senceUpdateFieldNames;
      if (marine_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], marine_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::CodeBattle.Marine element in MarineList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SenceUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SenceUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SenceUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SenceUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SenceUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SenceUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SenceUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SenceUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SenceUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SenceUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SenceUpdate MakeReadOnly() {
      marine_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SenceUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SenceUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SenceUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SenceUpdate result;
      
      private SenceUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          SenceUpdate original = result;
          result = new SenceUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SenceUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Observer.SenceUpdate.Descriptor; }
      }
      
      public override SenceUpdate DefaultInstanceForType {
        get { return global::CodeBattle.Observer.SenceUpdate.DefaultInstance; }
      }
      
      public override SenceUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SenceUpdate) {
          return MergeFrom((SenceUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SenceUpdate other) {
        if (other == global::CodeBattle.Observer.SenceUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.marine_.Count != 0) {
          result.marine_.Add(other.marine_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_senceUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _senceUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.marine_, global::CodeBattle.Marine.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::CodeBattle.Marine> MarineList {
        get { return PrepareBuilder().marine_; }
      }
      public int MarineCount {
        get { return result.MarineCount; }
      }
      public global::CodeBattle.Marine GetMarine(int index) {
        return result.GetMarine(index);
      }
      public Builder SetMarine(int index, global::CodeBattle.Marine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.marine_[index] = value;
        return this;
      }
      public Builder SetMarine(int index, global::CodeBattle.Marine.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.marine_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMarine(global::CodeBattle.Marine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.marine_.Add(value);
        return this;
      }
      public Builder AddMarine(global::CodeBattle.Marine.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.marine_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMarine(scg::IEnumerable<global::CodeBattle.Marine> values) {
        PrepareBuilder();
        result.marine_.Add(values);
        return this;
      }
      public Builder ClearMarine() {
        PrepareBuilder();
        result.marine_.Clear();
        return this;
      }
    }
    static SenceUpdate() {
      object.ReferenceEquals(global::CodeBattle.Observer.Observer.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CreateMarine : pb::GeneratedMessage<CreateMarine, CreateMarine.Builder> {
    private CreateMarine() { }
    private static readonly CreateMarine defaultInstance = new CreateMarine().MakeReadOnly();
    private static readonly string[] _createMarineFieldNames = new string[] { "color", "marine" };
    private static readonly uint[] _createMarineFieldTags = new uint[] { 10, 18 };
    public static CreateMarine DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateMarine DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CreateMarine ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_CreateMarine__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateMarine, CreateMarine.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Observer.Observer.internal__static_CodeBattle_Observer_CreateMarine__FieldAccessorTable; }
    }
    
    public const int ColorFieldNumber = 1;
    private bool hasColor;
    private string color_ = "";
    public bool HasColor {
      get { return hasColor; }
    }
    public string Color {
      get { return color_; }
    }
    
    public const int MarineFieldNumber = 2;
    private pbc::PopsicleList<global::CodeBattle.Marine> marine_ = new pbc::PopsicleList<global::CodeBattle.Marine>();
    public scg::IList<global::CodeBattle.Marine> MarineList {
      get { return marine_; }
    }
    public int MarineCount {
      get { return marine_.Count; }
    }
    public global::CodeBattle.Marine GetMarine(int index) {
      return marine_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasColor) return false;
        foreach (global::CodeBattle.Marine element in MarineList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _createMarineFieldNames;
      if (hasColor) {
        output.WriteString(1, field_names[0], Color);
      }
      if (marine_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], marine_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasColor) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Color);
        }
        foreach (global::CodeBattle.Marine element in MarineList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreateMarine ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateMarine ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateMarine ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateMarine ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateMarine ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateMarine ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateMarine ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateMarine ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateMarine ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateMarine ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CreateMarine MakeReadOnly() {
      marine_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateMarine prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CreateMarine, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CreateMarine cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CreateMarine result;
      
      private CreateMarine PrepareBuilder() {
        if (resultIsReadOnly) {
          CreateMarine original = result;
          result = new CreateMarine();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CreateMarine MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Observer.CreateMarine.Descriptor; }
      }
      
      public override CreateMarine DefaultInstanceForType {
        get { return global::CodeBattle.Observer.CreateMarine.DefaultInstance; }
      }
      
      public override CreateMarine BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateMarine) {
          return MergeFrom((CreateMarine) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateMarine other) {
        if (other == global::CodeBattle.Observer.CreateMarine.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasColor) {
          Color = other.Color;
        }
        if (other.marine_.Count != 0) {
          result.marine_.Add(other.marine_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_createMarineFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _createMarineFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasColor = input.ReadString(ref result.color_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.marine_, global::CodeBattle.Marine.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasColor {
        get { return result.hasColor; }
      }
      public string Color {
        get { return result.Color; }
        set { SetColor(value); }
      }
      public Builder SetColor(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = value;
        return this;
      }
      public Builder ClearColor() {
        PrepareBuilder();
        result.hasColor = false;
        result.color_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::CodeBattle.Marine> MarineList {
        get { return PrepareBuilder().marine_; }
      }
      public int MarineCount {
        get { return result.MarineCount; }
      }
      public global::CodeBattle.Marine GetMarine(int index) {
        return result.GetMarine(index);
      }
      public Builder SetMarine(int index, global::CodeBattle.Marine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.marine_[index] = value;
        return this;
      }
      public Builder SetMarine(int index, global::CodeBattle.Marine.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.marine_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMarine(global::CodeBattle.Marine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.marine_.Add(value);
        return this;
      }
      public Builder AddMarine(global::CodeBattle.Marine.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.marine_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMarine(scg::IEnumerable<global::CodeBattle.Marine> values) {
        PrepareBuilder();
        result.marine_.Add(values);
        return this;
      }
      public Builder ClearMarine() {
        PrepareBuilder();
        result.marine_.Clear();
        return this;
      }
    }
    static CreateMarine() {
      object.ReferenceEquals(global::CodeBattle.Observer.Observer.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
