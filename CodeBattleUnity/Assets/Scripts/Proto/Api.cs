// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace CodeBattle.Api {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Api {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Api_Cmd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Api.Cmd, global::CodeBattle.Api.Cmd.Builder> internal__static_CodeBattle_Api_Cmd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Api_Message__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Api.Message, global::CodeBattle.Api.Message.Builder> internal__static_CodeBattle_Api_Message__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Api_CmdResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Api.CmdResponse, global::CodeBattle.Api.CmdResponse.Builder> internal__static_CodeBattle_Api_CmdResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Api_SenceUpdate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Api.SenceUpdate, global::CodeBattle.Api.SenceUpdate.Builder> internal__static_CodeBattle_Api_SenceUpdate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Api_JoinRoom__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Api.JoinRoom, global::CodeBattle.Api.JoinRoom.Builder> internal__static_CodeBattle_Api_JoinRoom__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Api_CreateMarine__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Api.CreateMarine, global::CodeBattle.Api.CreateMarine.Builder> internal__static_CodeBattle_Api_CreateMarine__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Api_MarineOperate__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Api.MarineOperate, global::CodeBattle.Api.MarineOperate.Builder> internal__static_CodeBattle_Api_MarineOperate__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Api_JoinRoomResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Api.JoinRoomResponse, global::CodeBattle.Api.JoinRoomResponse.Builder> internal__static_CodeBattle_Api_JoinRoomResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CodeBattle_Api_CreateMarineResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Api.CreateMarineResponse, global::CodeBattle.Api.CreateMarineResponse.Builder> internal__static_CodeBattle_Api_CreateMarineResponse__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Api() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CglhcGkucHJvdG8SDkNvZGVCYXR0bGUuQXBpGgxtYXJpbmUucHJvdG8iqQEK" + 
          "A0NtZBIkCgNjbWQYASACKA4yFy5Db2RlQmF0dGxlLkFwaS5DbWRFbnVtEiUK" + 
          "A2pybRgCIAEoCzIYLkNvZGVCYXR0bGUuQXBpLkpvaW5Sb29tEikKA2NtZRgD" + 
          "IAEoCzIcLkNvZGVCYXR0bGUuQXBpLkNyZWF0ZU1hcmluZRIqCgNvcHQYBCAB" + 
          "KAsyHS5Db2RlQmF0dGxlLkFwaS5NYXJpbmVPcGVyYXRlIo8BCgdNZXNzYWdl" + 
          "EigKA21zZxgBIAIoDjIbLkNvZGVCYXR0bGUuQXBpLk1lc3NhZ2VFbnVtEi0K" + 
          "CHJlc3BvbnNlGAIgASgLMhsuQ29kZUJhdHRsZS5BcGkuQ21kUmVzcG9uc2US" + 
          "KwoGdXBkYXRlGAMgASgLMhsuQ29kZUJhdHRsZS5BcGkuU2VuY2VVcGRhdGUi" + 
          "sgEKC0NtZFJlc3BvbnNlEgsKA3JldBgBIAIoBRIkCgNjbWQYAiACKA4yFy5D" + 
          "b2RlQmF0dGxlLkFwaS5DbWRFbnVtEjUKC2pybVJlc3BvbnNlGAMgASgLMiAu" + 
          "Q29kZUJhdHRsZS5BcGkuSm9pblJvb21SZXNwb25zZRI5CgtjbWVSZXNwb25z" + 
          "ZRgEIAEoCzIkLkNvZGVCYXR0bGUuQXBpLkNyZWF0ZU1hcmluZVJlc3BvbnNl" + 
          "IlIKC1NlbmNlVXBkYXRlEh8KA293bhgBIAMoCzISLkNvZGVCYXR0bGUuTWFy" + 
          "aW5lEiIKBm90aGVycxgCIAMoCzISLkNvZGVCYXR0bGUuTWFyaW5lIhoKCEpv" + 
          "aW5Sb29tEg4KBnJvb21pZBgBIAIoBSJFCgxDcmVhdGVNYXJpbmUSDgoGcm9v" + 
          "bWlkGAEgAigFEiUKCHBvc2l0aW9uGAIgAigLMhMuQ29kZUJhdHRsZS5WZWN0" + 
          "b3IyImsKDU1hcmluZU9wZXJhdGUSCgoCaWQYASACKAUSIgoGc3RhdHVzGAIg" + 
          "AigOMhIuQ29kZUJhdHRsZS5TdGF0dXMSKgoNdGFyZ2V0UG9zdGlvbhgDIAEo" + 
          "CzITLkNvZGVCYXR0bGUuVmVjdG9yMiJpChBKb2luUm9vbVJlc3BvbnNlEgoK" + 
          "AmlkGAEgAigFEiQKBHNpemUYAiACKAsyFi5Db2RlQmF0dGxlLlZlY3RvcjJJ" + 
          "bnQSIwoHbWFyaW5lcxgDIAMoCzISLkNvZGVCYXR0bGUuTWFyaW5lIjoKFENy" + 
          "ZWF0ZU1hcmluZVJlc3BvbnNlEiIKBm1hcmluZRgBIAIoCzISLkNvZGVCYXR0" + 
          "bGUuTWFyaW5lKjwKB0NtZEVudW0SDAoIam9pbnJvb20QARIQCgxjcmVhdGVt" + 
          "YXJpbmUQAhIRCg1tYXJpbmVvcGVyYXRlEAMqQAoLTWVzc2FnZUVudW0SDwoL" + 
          "Y21kcmVzcG9uc2UQABIPCgtzZW5jZXVwZGF0ZRABEg8KC3N0YXJ0YmF0dGxl" + 
          "EAI=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_CodeBattle_Api_Cmd__Descriptor = Descriptor.MessageTypes[0];
        internal__static_CodeBattle_Api_Cmd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Api.Cmd, global::CodeBattle.Api.Cmd.Builder>(internal__static_CodeBattle_Api_Cmd__Descriptor,
                new string[] { "Cmd_", "Jrm", "Cme", "Opt", });
        internal__static_CodeBattle_Api_Message__Descriptor = Descriptor.MessageTypes[1];
        internal__static_CodeBattle_Api_Message__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Api.Message, global::CodeBattle.Api.Message.Builder>(internal__static_CodeBattle_Api_Message__Descriptor,
                new string[] { "Msg", "Response", "Update", });
        internal__static_CodeBattle_Api_CmdResponse__Descriptor = Descriptor.MessageTypes[2];
        internal__static_CodeBattle_Api_CmdResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Api.CmdResponse, global::CodeBattle.Api.CmdResponse.Builder>(internal__static_CodeBattle_Api_CmdResponse__Descriptor,
                new string[] { "Ret", "Cmd", "JrmResponse", "CmeResponse", });
        internal__static_CodeBattle_Api_SenceUpdate__Descriptor = Descriptor.MessageTypes[3];
        internal__static_CodeBattle_Api_SenceUpdate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Api.SenceUpdate, global::CodeBattle.Api.SenceUpdate.Builder>(internal__static_CodeBattle_Api_SenceUpdate__Descriptor,
                new string[] { "Own", "Others", });
        internal__static_CodeBattle_Api_JoinRoom__Descriptor = Descriptor.MessageTypes[4];
        internal__static_CodeBattle_Api_JoinRoom__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Api.JoinRoom, global::CodeBattle.Api.JoinRoom.Builder>(internal__static_CodeBattle_Api_JoinRoom__Descriptor,
                new string[] { "Roomid", });
        internal__static_CodeBattle_Api_CreateMarine__Descriptor = Descriptor.MessageTypes[5];
        internal__static_CodeBattle_Api_CreateMarine__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Api.CreateMarine, global::CodeBattle.Api.CreateMarine.Builder>(internal__static_CodeBattle_Api_CreateMarine__Descriptor,
                new string[] { "Roomid", "Position", });
        internal__static_CodeBattle_Api_MarineOperate__Descriptor = Descriptor.MessageTypes[6];
        internal__static_CodeBattle_Api_MarineOperate__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Api.MarineOperate, global::CodeBattle.Api.MarineOperate.Builder>(internal__static_CodeBattle_Api_MarineOperate__Descriptor,
                new string[] { "Id", "Status", "TargetPostion", });
        internal__static_CodeBattle_Api_JoinRoomResponse__Descriptor = Descriptor.MessageTypes[7];
        internal__static_CodeBattle_Api_JoinRoomResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Api.JoinRoomResponse, global::CodeBattle.Api.JoinRoomResponse.Builder>(internal__static_CodeBattle_Api_JoinRoomResponse__Descriptor,
                new string[] { "Id", "Size", "Marines", });
        internal__static_CodeBattle_Api_CreateMarineResponse__Descriptor = Descriptor.MessageTypes[8];
        internal__static_CodeBattle_Api_CreateMarineResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Api.CreateMarineResponse, global::CodeBattle.Api.CreateMarineResponse.Builder>(internal__static_CodeBattle_Api_CreateMarineResponse__Descriptor,
                new string[] { "Marine", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::CodeBattle.Proto.Marine.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum CmdEnum {
    joinroom = 1,
    createmarine = 2,
    marineoperate = 3,
  }
  
  public enum MessageEnum {
    cmdresponse = 0,
    senceupdate = 1,
    startbattle = 2,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Cmd : pb::GeneratedMessage<Cmd, Cmd.Builder> {
    private Cmd() { }
    private static readonly Cmd defaultInstance = new Cmd().MakeReadOnly();
    private static readonly string[] _cmdFieldNames = new string[] { "cmd", "cme", "jrm", "opt" };
    private static readonly uint[] _cmdFieldTags = new uint[] { 8, 26, 18, 34 };
    public static Cmd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Cmd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Cmd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Api.Api.internal__static_CodeBattle_Api_Cmd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Cmd, Cmd.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Api.Api.internal__static_CodeBattle_Api_Cmd__FieldAccessorTable; }
    }
    
    public const int Cmd_FieldNumber = 1;
    private bool hasCmd_;
    private global::CodeBattle.Api.CmdEnum cmd_ = global::CodeBattle.Api.CmdEnum.joinroom;
    public bool HasCmd_ {
      get { return hasCmd_; }
    }
    public global::CodeBattle.Api.CmdEnum Cmd_ {
      get { return cmd_; }
    }
    
    public const int JrmFieldNumber = 2;
    private bool hasJrm;
    private global::CodeBattle.Api.JoinRoom jrm_;
    public bool HasJrm {
      get { return hasJrm; }
    }
    public global::CodeBattle.Api.JoinRoom Jrm {
      get { return jrm_ ?? global::CodeBattle.Api.JoinRoom.DefaultInstance; }
    }
    
    public const int CmeFieldNumber = 3;
    private bool hasCme;
    private global::CodeBattle.Api.CreateMarine cme_;
    public bool HasCme {
      get { return hasCme; }
    }
    public global::CodeBattle.Api.CreateMarine Cme {
      get { return cme_ ?? global::CodeBattle.Api.CreateMarine.DefaultInstance; }
    }
    
    public const int OptFieldNumber = 4;
    private bool hasOpt;
    private global::CodeBattle.Api.MarineOperate opt_;
    public bool HasOpt {
      get { return hasOpt; }
    }
    public global::CodeBattle.Api.MarineOperate Opt {
      get { return opt_ ?? global::CodeBattle.Api.MarineOperate.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCmd_) return false;
        if (HasJrm) {
          if (!Jrm.IsInitialized) return false;
        }
        if (HasCme) {
          if (!Cme.IsInitialized) return false;
        }
        if (HasOpt) {
          if (!Opt.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cmdFieldNames;
      if (hasCmd_) {
        output.WriteEnum(1, field_names[0], (int) Cmd_, Cmd_);
      }
      if (hasJrm) {
        output.WriteMessage(2, field_names[2], Jrm);
      }
      if (hasCme) {
        output.WriteMessage(3, field_names[1], Cme);
      }
      if (hasOpt) {
        output.WriteMessage(4, field_names[3], Opt);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCmd_) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Cmd_);
        }
        if (hasJrm) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Jrm);
        }
        if (hasCme) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Cme);
        }
        if (hasOpt) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Opt);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Cmd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Cmd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Cmd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Cmd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Cmd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Cmd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Cmd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Cmd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Cmd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Cmd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Cmd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Cmd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Cmd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Cmd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Cmd result;
      
      private Cmd PrepareBuilder() {
        if (resultIsReadOnly) {
          Cmd original = result;
          result = new Cmd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Cmd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Api.Cmd.Descriptor; }
      }
      
      public override Cmd DefaultInstanceForType {
        get { return global::CodeBattle.Api.Cmd.DefaultInstance; }
      }
      
      public override Cmd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Cmd) {
          return MergeFrom((Cmd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Cmd other) {
        if (other == global::CodeBattle.Api.Cmd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCmd_) {
          Cmd_ = other.Cmd_;
        }
        if (other.HasJrm) {
          MergeJrm(other.Jrm);
        }
        if (other.HasCme) {
          MergeCme(other.Cme);
        }
        if (other.HasOpt) {
          MergeOpt(other.Opt);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cmdFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cmdFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.cmd_, out unknown)) {
                result.hasCmd_ = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::CodeBattle.Api.JoinRoom.Builder subBuilder = global::CodeBattle.Api.JoinRoom.CreateBuilder();
              if (result.hasJrm) {
                subBuilder.MergeFrom(Jrm);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Jrm = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::CodeBattle.Api.CreateMarine.Builder subBuilder = global::CodeBattle.Api.CreateMarine.CreateBuilder();
              if (result.hasCme) {
                subBuilder.MergeFrom(Cme);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Cme = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::CodeBattle.Api.MarineOperate.Builder subBuilder = global::CodeBattle.Api.MarineOperate.CreateBuilder();
              if (result.hasOpt) {
                subBuilder.MergeFrom(Opt);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Opt = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCmd_ {
       get { return result.hasCmd_; }
      }
      public global::CodeBattle.Api.CmdEnum Cmd_ {
        get { return result.Cmd_; }
        set { SetCmd_(value); }
      }
      public Builder SetCmd_(global::CodeBattle.Api.CmdEnum value) {
        PrepareBuilder();
        result.hasCmd_ = true;
        result.cmd_ = value;
        return this;
      }
      public Builder ClearCmd_() {
        PrepareBuilder();
        result.hasCmd_ = false;
        result.cmd_ = global::CodeBattle.Api.CmdEnum.joinroom;
        return this;
      }
      
      public bool HasJrm {
       get { return result.hasJrm; }
      }
      public global::CodeBattle.Api.JoinRoom Jrm {
        get { return result.Jrm; }
        set { SetJrm(value); }
      }
      public Builder SetJrm(global::CodeBattle.Api.JoinRoom value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasJrm = true;
        result.jrm_ = value;
        return this;
      }
      public Builder SetJrm(global::CodeBattle.Api.JoinRoom.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasJrm = true;
        result.jrm_ = builderForValue.Build();
        return this;
      }
      public Builder MergeJrm(global::CodeBattle.Api.JoinRoom value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasJrm &&
            result.jrm_ != global::CodeBattle.Api.JoinRoom.DefaultInstance) {
            result.jrm_ = global::CodeBattle.Api.JoinRoom.CreateBuilder(result.jrm_).MergeFrom(value).BuildPartial();
        } else {
          result.jrm_ = value;
        }
        result.hasJrm = true;
        return this;
      }
      public Builder ClearJrm() {
        PrepareBuilder();
        result.hasJrm = false;
        result.jrm_ = null;
        return this;
      }
      
      public bool HasCme {
       get { return result.hasCme; }
      }
      public global::CodeBattle.Api.CreateMarine Cme {
        get { return result.Cme; }
        set { SetCme(value); }
      }
      public Builder SetCme(global::CodeBattle.Api.CreateMarine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCme = true;
        result.cme_ = value;
        return this;
      }
      public Builder SetCme(global::CodeBattle.Api.CreateMarine.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCme = true;
        result.cme_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCme(global::CodeBattle.Api.CreateMarine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCme &&
            result.cme_ != global::CodeBattle.Api.CreateMarine.DefaultInstance) {
            result.cme_ = global::CodeBattle.Api.CreateMarine.CreateBuilder(result.cme_).MergeFrom(value).BuildPartial();
        } else {
          result.cme_ = value;
        }
        result.hasCme = true;
        return this;
      }
      public Builder ClearCme() {
        PrepareBuilder();
        result.hasCme = false;
        result.cme_ = null;
        return this;
      }
      
      public bool HasOpt {
       get { return result.hasOpt; }
      }
      public global::CodeBattle.Api.MarineOperate Opt {
        get { return result.Opt; }
        set { SetOpt(value); }
      }
      public Builder SetOpt(global::CodeBattle.Api.MarineOperate value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpt = true;
        result.opt_ = value;
        return this;
      }
      public Builder SetOpt(global::CodeBattle.Api.MarineOperate.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOpt = true;
        result.opt_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOpt(global::CodeBattle.Api.MarineOperate value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOpt &&
            result.opt_ != global::CodeBattle.Api.MarineOperate.DefaultInstance) {
            result.opt_ = global::CodeBattle.Api.MarineOperate.CreateBuilder(result.opt_).MergeFrom(value).BuildPartial();
        } else {
          result.opt_ = value;
        }
        result.hasOpt = true;
        return this;
      }
      public Builder ClearOpt() {
        PrepareBuilder();
        result.hasOpt = false;
        result.opt_ = null;
        return this;
      }
    }
    static Cmd() {
      object.ReferenceEquals(global::CodeBattle.Api.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Message : pb::GeneratedMessage<Message, Message.Builder> {
    private Message() { }
    private static readonly Message defaultInstance = new Message().MakeReadOnly();
    private static readonly string[] _messageFieldNames = new string[] { "msg", "response", "update" };
    private static readonly uint[] _messageFieldTags = new uint[] { 8, 18, 26 };
    public static Message DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Message DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Message ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Api.Api.internal__static_CodeBattle_Api_Message__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Message, Message.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Api.Api.internal__static_CodeBattle_Api_Message__FieldAccessorTable; }
    }
    
    public const int MsgFieldNumber = 1;
    private bool hasMsg;
    private global::CodeBattle.Api.MessageEnum msg_ = global::CodeBattle.Api.MessageEnum.cmdresponse;
    public bool HasMsg {
      get { return hasMsg; }
    }
    public global::CodeBattle.Api.MessageEnum Msg {
      get { return msg_; }
    }
    
    public const int ResponseFieldNumber = 2;
    private bool hasResponse;
    private global::CodeBattle.Api.CmdResponse response_;
    public bool HasResponse {
      get { return hasResponse; }
    }
    public global::CodeBattle.Api.CmdResponse Response {
      get { return response_ ?? global::CodeBattle.Api.CmdResponse.DefaultInstance; }
    }
    
    public const int UpdateFieldNumber = 3;
    private bool hasUpdate;
    private global::CodeBattle.Api.SenceUpdate update_;
    public bool HasUpdate {
      get { return hasUpdate; }
    }
    public global::CodeBattle.Api.SenceUpdate Update {
      get { return update_ ?? global::CodeBattle.Api.SenceUpdate.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMsg) return false;
        if (HasResponse) {
          if (!Response.IsInitialized) return false;
        }
        if (HasUpdate) {
          if (!Update.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _messageFieldNames;
      if (hasMsg) {
        output.WriteEnum(1, field_names[0], (int) Msg, Msg);
      }
      if (hasResponse) {
        output.WriteMessage(2, field_names[1], Response);
      }
      if (hasUpdate) {
        output.WriteMessage(3, field_names[2], Update);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMsg) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Msg);
        }
        if (hasResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Response);
        }
        if (hasUpdate) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Update);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Message ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Message ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Message ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Message ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Message ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Message ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Message ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Message ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Message ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Message ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Message MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Message prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Message, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Message cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Message result;
      
      private Message PrepareBuilder() {
        if (resultIsReadOnly) {
          Message original = result;
          result = new Message();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Message MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Api.Message.Descriptor; }
      }
      
      public override Message DefaultInstanceForType {
        get { return global::CodeBattle.Api.Message.DefaultInstance; }
      }
      
      public override Message BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Message) {
          return MergeFrom((Message) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Message other) {
        if (other == global::CodeBattle.Api.Message.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMsg) {
          Msg = other.Msg;
        }
        if (other.HasResponse) {
          MergeResponse(other.Response);
        }
        if (other.HasUpdate) {
          MergeUpdate(other.Update);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_messageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _messageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.msg_, out unknown)) {
                result.hasMsg = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::CodeBattle.Api.CmdResponse.Builder subBuilder = global::CodeBattle.Api.CmdResponse.CreateBuilder();
              if (result.hasResponse) {
                subBuilder.MergeFrom(Response);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Response = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::CodeBattle.Api.SenceUpdate.Builder subBuilder = global::CodeBattle.Api.SenceUpdate.CreateBuilder();
              if (result.hasUpdate) {
                subBuilder.MergeFrom(Update);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Update = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMsg {
       get { return result.hasMsg; }
      }
      public global::CodeBattle.Api.MessageEnum Msg {
        get { return result.Msg; }
        set { SetMsg(value); }
      }
      public Builder SetMsg(global::CodeBattle.Api.MessageEnum value) {
        PrepareBuilder();
        result.hasMsg = true;
        result.msg_ = value;
        return this;
      }
      public Builder ClearMsg() {
        PrepareBuilder();
        result.hasMsg = false;
        result.msg_ = global::CodeBattle.Api.MessageEnum.cmdresponse;
        return this;
      }
      
      public bool HasResponse {
       get { return result.hasResponse; }
      }
      public global::CodeBattle.Api.CmdResponse Response {
        get { return result.Response; }
        set { SetResponse(value); }
      }
      public Builder SetResponse(global::CodeBattle.Api.CmdResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResponse = true;
        result.response_ = value;
        return this;
      }
      public Builder SetResponse(global::CodeBattle.Api.CmdResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasResponse = true;
        result.response_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResponse(global::CodeBattle.Api.CmdResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasResponse &&
            result.response_ != global::CodeBattle.Api.CmdResponse.DefaultInstance) {
            result.response_ = global::CodeBattle.Api.CmdResponse.CreateBuilder(result.response_).MergeFrom(value).BuildPartial();
        } else {
          result.response_ = value;
        }
        result.hasResponse = true;
        return this;
      }
      public Builder ClearResponse() {
        PrepareBuilder();
        result.hasResponse = false;
        result.response_ = null;
        return this;
      }
      
      public bool HasUpdate {
       get { return result.hasUpdate; }
      }
      public global::CodeBattle.Api.SenceUpdate Update {
        get { return result.Update; }
        set { SetUpdate(value); }
      }
      public Builder SetUpdate(global::CodeBattle.Api.SenceUpdate value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUpdate = true;
        result.update_ = value;
        return this;
      }
      public Builder SetUpdate(global::CodeBattle.Api.SenceUpdate.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUpdate = true;
        result.update_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUpdate(global::CodeBattle.Api.SenceUpdate value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUpdate &&
            result.update_ != global::CodeBattle.Api.SenceUpdate.DefaultInstance) {
            result.update_ = global::CodeBattle.Api.SenceUpdate.CreateBuilder(result.update_).MergeFrom(value).BuildPartial();
        } else {
          result.update_ = value;
        }
        result.hasUpdate = true;
        return this;
      }
      public Builder ClearUpdate() {
        PrepareBuilder();
        result.hasUpdate = false;
        result.update_ = null;
        return this;
      }
    }
    static Message() {
      object.ReferenceEquals(global::CodeBattle.Api.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CmdResponse : pb::GeneratedMessage<CmdResponse, CmdResponse.Builder> {
    private CmdResponse() { }
    private static readonly CmdResponse defaultInstance = new CmdResponse().MakeReadOnly();
    private static readonly string[] _cmdResponseFieldNames = new string[] { "cmd", "cmeResponse", "jrmResponse", "ret" };
    private static readonly uint[] _cmdResponseFieldTags = new uint[] { 16, 34, 26, 8 };
    public static CmdResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CmdResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CmdResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Api.Api.internal__static_CodeBattle_Api_CmdResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CmdResponse, CmdResponse.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Api.Api.internal__static_CodeBattle_Api_CmdResponse__FieldAccessorTable; }
    }
    
    public const int RetFieldNumber = 1;
    private bool hasRet;
    private int ret_;
    public bool HasRet {
      get { return hasRet; }
    }
    public int Ret {
      get { return ret_; }
    }
    
    public const int CmdFieldNumber = 2;
    private bool hasCmd;
    private global::CodeBattle.Api.CmdEnum cmd_ = global::CodeBattle.Api.CmdEnum.joinroom;
    public bool HasCmd {
      get { return hasCmd; }
    }
    public global::CodeBattle.Api.CmdEnum Cmd {
      get { return cmd_; }
    }
    
    public const int JrmResponseFieldNumber = 3;
    private bool hasJrmResponse;
    private global::CodeBattle.Api.JoinRoomResponse jrmResponse_;
    public bool HasJrmResponse {
      get { return hasJrmResponse; }
    }
    public global::CodeBattle.Api.JoinRoomResponse JrmResponse {
      get { return jrmResponse_ ?? global::CodeBattle.Api.JoinRoomResponse.DefaultInstance; }
    }
    
    public const int CmeResponseFieldNumber = 4;
    private bool hasCmeResponse;
    private global::CodeBattle.Api.CreateMarineResponse cmeResponse_;
    public bool HasCmeResponse {
      get { return hasCmeResponse; }
    }
    public global::CodeBattle.Api.CreateMarineResponse CmeResponse {
      get { return cmeResponse_ ?? global::CodeBattle.Api.CreateMarineResponse.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRet) return false;
        if (!hasCmd) return false;
        if (HasJrmResponse) {
          if (!JrmResponse.IsInitialized) return false;
        }
        if (HasCmeResponse) {
          if (!CmeResponse.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cmdResponseFieldNames;
      if (hasRet) {
        output.WriteInt32(1, field_names[3], Ret);
      }
      if (hasCmd) {
        output.WriteEnum(2, field_names[0], (int) Cmd, Cmd);
      }
      if (hasJrmResponse) {
        output.WriteMessage(3, field_names[2], JrmResponse);
      }
      if (hasCmeResponse) {
        output.WriteMessage(4, field_names[1], CmeResponse);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRet) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Ret);
        }
        if (hasCmd) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Cmd);
        }
        if (hasJrmResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, JrmResponse);
        }
        if (hasCmeResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, CmeResponse);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CmdResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CmdResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CmdResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CmdResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CmdResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CmdResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CmdResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CmdResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CmdResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CmdResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CmdResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CmdResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CmdResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CmdResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CmdResponse result;
      
      private CmdResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CmdResponse original = result;
          result = new CmdResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CmdResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Api.CmdResponse.Descriptor; }
      }
      
      public override CmdResponse DefaultInstanceForType {
        get { return global::CodeBattle.Api.CmdResponse.DefaultInstance; }
      }
      
      public override CmdResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CmdResponse) {
          return MergeFrom((CmdResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CmdResponse other) {
        if (other == global::CodeBattle.Api.CmdResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRet) {
          Ret = other.Ret;
        }
        if (other.HasCmd) {
          Cmd = other.Cmd;
        }
        if (other.HasJrmResponse) {
          MergeJrmResponse(other.JrmResponse);
        }
        if (other.HasCmeResponse) {
          MergeCmeResponse(other.CmeResponse);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cmdResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cmdResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRet = input.ReadInt32(ref result.ret_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.cmd_, out unknown)) {
                result.hasCmd = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              global::CodeBattle.Api.JoinRoomResponse.Builder subBuilder = global::CodeBattle.Api.JoinRoomResponse.CreateBuilder();
              if (result.hasJrmResponse) {
                subBuilder.MergeFrom(JrmResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              JrmResponse = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::CodeBattle.Api.CreateMarineResponse.Builder subBuilder = global::CodeBattle.Api.CreateMarineResponse.CreateBuilder();
              if (result.hasCmeResponse) {
                subBuilder.MergeFrom(CmeResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CmeResponse = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRet {
        get { return result.hasRet; }
      }
      public int Ret {
        get { return result.Ret; }
        set { SetRet(value); }
      }
      public Builder SetRet(int value) {
        PrepareBuilder();
        result.hasRet = true;
        result.ret_ = value;
        return this;
      }
      public Builder ClearRet() {
        PrepareBuilder();
        result.hasRet = false;
        result.ret_ = 0;
        return this;
      }
      
      public bool HasCmd {
       get { return result.hasCmd; }
      }
      public global::CodeBattle.Api.CmdEnum Cmd {
        get { return result.Cmd; }
        set { SetCmd(value); }
      }
      public Builder SetCmd(global::CodeBattle.Api.CmdEnum value) {
        PrepareBuilder();
        result.hasCmd = true;
        result.cmd_ = value;
        return this;
      }
      public Builder ClearCmd() {
        PrepareBuilder();
        result.hasCmd = false;
        result.cmd_ = global::CodeBattle.Api.CmdEnum.joinroom;
        return this;
      }
      
      public bool HasJrmResponse {
       get { return result.hasJrmResponse; }
      }
      public global::CodeBattle.Api.JoinRoomResponse JrmResponse {
        get { return result.JrmResponse; }
        set { SetJrmResponse(value); }
      }
      public Builder SetJrmResponse(global::CodeBattle.Api.JoinRoomResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasJrmResponse = true;
        result.jrmResponse_ = value;
        return this;
      }
      public Builder SetJrmResponse(global::CodeBattle.Api.JoinRoomResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasJrmResponse = true;
        result.jrmResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeJrmResponse(global::CodeBattle.Api.JoinRoomResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasJrmResponse &&
            result.jrmResponse_ != global::CodeBattle.Api.JoinRoomResponse.DefaultInstance) {
            result.jrmResponse_ = global::CodeBattle.Api.JoinRoomResponse.CreateBuilder(result.jrmResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.jrmResponse_ = value;
        }
        result.hasJrmResponse = true;
        return this;
      }
      public Builder ClearJrmResponse() {
        PrepareBuilder();
        result.hasJrmResponse = false;
        result.jrmResponse_ = null;
        return this;
      }
      
      public bool HasCmeResponse {
       get { return result.hasCmeResponse; }
      }
      public global::CodeBattle.Api.CreateMarineResponse CmeResponse {
        get { return result.CmeResponse; }
        set { SetCmeResponse(value); }
      }
      public Builder SetCmeResponse(global::CodeBattle.Api.CreateMarineResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCmeResponse = true;
        result.cmeResponse_ = value;
        return this;
      }
      public Builder SetCmeResponse(global::CodeBattle.Api.CreateMarineResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCmeResponse = true;
        result.cmeResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCmeResponse(global::CodeBattle.Api.CreateMarineResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCmeResponse &&
            result.cmeResponse_ != global::CodeBattle.Api.CreateMarineResponse.DefaultInstance) {
            result.cmeResponse_ = global::CodeBattle.Api.CreateMarineResponse.CreateBuilder(result.cmeResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.cmeResponse_ = value;
        }
        result.hasCmeResponse = true;
        return this;
      }
      public Builder ClearCmeResponse() {
        PrepareBuilder();
        result.hasCmeResponse = false;
        result.cmeResponse_ = null;
        return this;
      }
    }
    static CmdResponse() {
      object.ReferenceEquals(global::CodeBattle.Api.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SenceUpdate : pb::GeneratedMessage<SenceUpdate, SenceUpdate.Builder> {
    private SenceUpdate() { }
    private static readonly SenceUpdate defaultInstance = new SenceUpdate().MakeReadOnly();
    private static readonly string[] _senceUpdateFieldNames = new string[] { "others", "own" };
    private static readonly uint[] _senceUpdateFieldTags = new uint[] { 18, 10 };
    public static SenceUpdate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SenceUpdate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SenceUpdate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Api.Api.internal__static_CodeBattle_Api_SenceUpdate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SenceUpdate, SenceUpdate.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Api.Api.internal__static_CodeBattle_Api_SenceUpdate__FieldAccessorTable; }
    }
    
    public const int OwnFieldNumber = 1;
    private pbc::PopsicleList<global::CodeBattle.Marine> own_ = new pbc::PopsicleList<global::CodeBattle.Marine>();
    public scg::IList<global::CodeBattle.Marine> OwnList {
      get { return own_; }
    }
    public int OwnCount {
      get { return own_.Count; }
    }
    public global::CodeBattle.Marine GetOwn(int index) {
      return own_[index];
    }
    
    public const int OthersFieldNumber = 2;
    private pbc::PopsicleList<global::CodeBattle.Marine> others_ = new pbc::PopsicleList<global::CodeBattle.Marine>();
    public scg::IList<global::CodeBattle.Marine> OthersList {
      get { return others_; }
    }
    public int OthersCount {
      get { return others_.Count; }
    }
    public global::CodeBattle.Marine GetOthers(int index) {
      return others_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::CodeBattle.Marine element in OwnList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::CodeBattle.Marine element in OthersList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _senceUpdateFieldNames;
      if (own_.Count > 0) {
        output.WriteMessageArray(1, field_names[1], own_);
      }
      if (others_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], others_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::CodeBattle.Marine element in OwnList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        foreach (global::CodeBattle.Marine element in OthersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SenceUpdate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SenceUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SenceUpdate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SenceUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SenceUpdate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SenceUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SenceUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SenceUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SenceUpdate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SenceUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SenceUpdate MakeReadOnly() {
      own_.MakeReadOnly();
      others_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SenceUpdate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SenceUpdate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SenceUpdate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SenceUpdate result;
      
      private SenceUpdate PrepareBuilder() {
        if (resultIsReadOnly) {
          SenceUpdate original = result;
          result = new SenceUpdate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SenceUpdate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Api.SenceUpdate.Descriptor; }
      }
      
      public override SenceUpdate DefaultInstanceForType {
        get { return global::CodeBattle.Api.SenceUpdate.DefaultInstance; }
      }
      
      public override SenceUpdate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SenceUpdate) {
          return MergeFrom((SenceUpdate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SenceUpdate other) {
        if (other == global::CodeBattle.Api.SenceUpdate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.own_.Count != 0) {
          result.own_.Add(other.own_);
        }
        if (other.others_.Count != 0) {
          result.others_.Add(other.others_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_senceUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _senceUpdateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.own_, global::CodeBattle.Marine.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.others_, global::CodeBattle.Marine.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::CodeBattle.Marine> OwnList {
        get { return PrepareBuilder().own_; }
      }
      public int OwnCount {
        get { return result.OwnCount; }
      }
      public global::CodeBattle.Marine GetOwn(int index) {
        return result.GetOwn(index);
      }
      public Builder SetOwn(int index, global::CodeBattle.Marine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.own_[index] = value;
        return this;
      }
      public Builder SetOwn(int index, global::CodeBattle.Marine.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.own_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddOwn(global::CodeBattle.Marine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.own_.Add(value);
        return this;
      }
      public Builder AddOwn(global::CodeBattle.Marine.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.own_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeOwn(scg::IEnumerable<global::CodeBattle.Marine> values) {
        PrepareBuilder();
        result.own_.Add(values);
        return this;
      }
      public Builder ClearOwn() {
        PrepareBuilder();
        result.own_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::CodeBattle.Marine> OthersList {
        get { return PrepareBuilder().others_; }
      }
      public int OthersCount {
        get { return result.OthersCount; }
      }
      public global::CodeBattle.Marine GetOthers(int index) {
        return result.GetOthers(index);
      }
      public Builder SetOthers(int index, global::CodeBattle.Marine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.others_[index] = value;
        return this;
      }
      public Builder SetOthers(int index, global::CodeBattle.Marine.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.others_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddOthers(global::CodeBattle.Marine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.others_.Add(value);
        return this;
      }
      public Builder AddOthers(global::CodeBattle.Marine.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.others_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeOthers(scg::IEnumerable<global::CodeBattle.Marine> values) {
        PrepareBuilder();
        result.others_.Add(values);
        return this;
      }
      public Builder ClearOthers() {
        PrepareBuilder();
        result.others_.Clear();
        return this;
      }
    }
    static SenceUpdate() {
      object.ReferenceEquals(global::CodeBattle.Api.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class JoinRoom : pb::GeneratedMessage<JoinRoom, JoinRoom.Builder> {
    private JoinRoom() { }
    private static readonly JoinRoom defaultInstance = new JoinRoom().MakeReadOnly();
    private static readonly string[] _joinRoomFieldNames = new string[] { "roomid" };
    private static readonly uint[] _joinRoomFieldTags = new uint[] { 8 };
    public static JoinRoom DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override JoinRoom DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override JoinRoom ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Api.Api.internal__static_CodeBattle_Api_JoinRoom__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<JoinRoom, JoinRoom.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Api.Api.internal__static_CodeBattle_Api_JoinRoom__FieldAccessorTable; }
    }
    
    public const int RoomidFieldNumber = 1;
    private bool hasRoomid;
    private int roomid_;
    public bool HasRoomid {
      get { return hasRoomid; }
    }
    public int Roomid {
      get { return roomid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRoomid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _joinRoomFieldNames;
      if (hasRoomid) {
        output.WriteInt32(1, field_names[0], Roomid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRoomid) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Roomid);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static JoinRoom ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinRoom ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinRoom ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinRoom ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinRoom ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinRoom ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static JoinRoom ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static JoinRoom ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static JoinRoom ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinRoom ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private JoinRoom MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(JoinRoom prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<JoinRoom, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(JoinRoom cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private JoinRoom result;
      
      private JoinRoom PrepareBuilder() {
        if (resultIsReadOnly) {
          JoinRoom original = result;
          result = new JoinRoom();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override JoinRoom MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Api.JoinRoom.Descriptor; }
      }
      
      public override JoinRoom DefaultInstanceForType {
        get { return global::CodeBattle.Api.JoinRoom.DefaultInstance; }
      }
      
      public override JoinRoom BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is JoinRoom) {
          return MergeFrom((JoinRoom) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(JoinRoom other) {
        if (other == global::CodeBattle.Api.JoinRoom.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRoomid) {
          Roomid = other.Roomid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_joinRoomFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _joinRoomFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRoomid = input.ReadInt32(ref result.roomid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRoomid {
        get { return result.hasRoomid; }
      }
      public int Roomid {
        get { return result.Roomid; }
        set { SetRoomid(value); }
      }
      public Builder SetRoomid(int value) {
        PrepareBuilder();
        result.hasRoomid = true;
        result.roomid_ = value;
        return this;
      }
      public Builder ClearRoomid() {
        PrepareBuilder();
        result.hasRoomid = false;
        result.roomid_ = 0;
        return this;
      }
    }
    static JoinRoom() {
      object.ReferenceEquals(global::CodeBattle.Api.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CreateMarine : pb::GeneratedMessage<CreateMarine, CreateMarine.Builder> {
    private CreateMarine() { }
    private static readonly CreateMarine defaultInstance = new CreateMarine().MakeReadOnly();
    private static readonly string[] _createMarineFieldNames = new string[] { "position", "roomid" };
    private static readonly uint[] _createMarineFieldTags = new uint[] { 18, 8 };
    public static CreateMarine DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateMarine DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CreateMarine ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Api.Api.internal__static_CodeBattle_Api_CreateMarine__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateMarine, CreateMarine.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Api.Api.internal__static_CodeBattle_Api_CreateMarine__FieldAccessorTable; }
    }
    
    public const int RoomidFieldNumber = 1;
    private bool hasRoomid;
    private int roomid_;
    public bool HasRoomid {
      get { return hasRoomid; }
    }
    public int Roomid {
      get { return roomid_; }
    }
    
    public const int PositionFieldNumber = 2;
    private bool hasPosition;
    private global::CodeBattle.Vector2 position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::CodeBattle.Vector2 Position {
      get { return position_ ?? global::CodeBattle.Vector2.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRoomid) return false;
        if (!hasPosition) return false;
        if (!Position.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _createMarineFieldNames;
      if (hasRoomid) {
        output.WriteInt32(1, field_names[1], Roomid);
      }
      if (hasPosition) {
        output.WriteMessage(2, field_names[0], Position);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRoomid) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Roomid);
        }
        if (hasPosition) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Position);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreateMarine ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateMarine ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateMarine ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateMarine ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateMarine ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateMarine ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateMarine ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateMarine ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateMarine ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateMarine ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CreateMarine MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateMarine prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CreateMarine, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CreateMarine cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CreateMarine result;
      
      private CreateMarine PrepareBuilder() {
        if (resultIsReadOnly) {
          CreateMarine original = result;
          result = new CreateMarine();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CreateMarine MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Api.CreateMarine.Descriptor; }
      }
      
      public override CreateMarine DefaultInstanceForType {
        get { return global::CodeBattle.Api.CreateMarine.DefaultInstance; }
      }
      
      public override CreateMarine BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateMarine) {
          return MergeFrom((CreateMarine) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateMarine other) {
        if (other == global::CodeBattle.Api.CreateMarine.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRoomid) {
          Roomid = other.Roomid;
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_createMarineFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _createMarineFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRoomid = input.ReadInt32(ref result.roomid_);
              break;
            }
            case 18: {
              global::CodeBattle.Vector2.Builder subBuilder = global::CodeBattle.Vector2.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRoomid {
        get { return result.hasRoomid; }
      }
      public int Roomid {
        get { return result.Roomid; }
        set { SetRoomid(value); }
      }
      public Builder SetRoomid(int value) {
        PrepareBuilder();
        result.hasRoomid = true;
        result.roomid_ = value;
        return this;
      }
      public Builder ClearRoomid() {
        PrepareBuilder();
        result.hasRoomid = false;
        result.roomid_ = 0;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::CodeBattle.Vector2 Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::CodeBattle.Vector2 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::CodeBattle.Vector2.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::CodeBattle.Vector2 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::CodeBattle.Vector2.DefaultInstance) {
            result.position_ = global::CodeBattle.Vector2.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
    }
    static CreateMarine() {
      object.ReferenceEquals(global::CodeBattle.Api.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MarineOperate : pb::GeneratedMessage<MarineOperate, MarineOperate.Builder> {
    private MarineOperate() { }
    private static readonly MarineOperate defaultInstance = new MarineOperate().MakeReadOnly();
    private static readonly string[] _marineOperateFieldNames = new string[] { "id", "status", "targetPostion" };
    private static readonly uint[] _marineOperateFieldTags = new uint[] { 8, 16, 26 };
    public static MarineOperate DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MarineOperate DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MarineOperate ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Api.Api.internal__static_CodeBattle_Api_MarineOperate__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MarineOperate, MarineOperate.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Api.Api.internal__static_CodeBattle_Api_MarineOperate__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int StatusFieldNumber = 2;
    private bool hasStatus;
    private global::CodeBattle.Status status_ = global::CodeBattle.Status.Idle;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::CodeBattle.Status Status {
      get { return status_; }
    }
    
    public const int TargetPostionFieldNumber = 3;
    private bool hasTargetPostion;
    private global::CodeBattle.Vector2 targetPostion_;
    public bool HasTargetPostion {
      get { return hasTargetPostion; }
    }
    public global::CodeBattle.Vector2 TargetPostion {
      get { return targetPostion_ ?? global::CodeBattle.Vector2.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasStatus) return false;
        if (HasTargetPostion) {
          if (!TargetPostion.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _marineOperateFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasStatus) {
        output.WriteEnum(2, field_names[1], (int) Status, Status);
      }
      if (hasTargetPostion) {
        output.WriteMessage(3, field_names[2], TargetPostion);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Status);
        }
        if (hasTargetPostion) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, TargetPostion);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MarineOperate ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarineOperate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarineOperate ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MarineOperate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MarineOperate ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarineOperate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MarineOperate ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MarineOperate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MarineOperate ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MarineOperate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MarineOperate MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MarineOperate prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MarineOperate, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MarineOperate cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MarineOperate result;
      
      private MarineOperate PrepareBuilder() {
        if (resultIsReadOnly) {
          MarineOperate original = result;
          result = new MarineOperate();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MarineOperate MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Api.MarineOperate.Descriptor; }
      }
      
      public override MarineOperate DefaultInstanceForType {
        get { return global::CodeBattle.Api.MarineOperate.DefaultInstance; }
      }
      
      public override MarineOperate BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MarineOperate) {
          return MergeFrom((MarineOperate) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MarineOperate other) {
        if (other == global::CodeBattle.Api.MarineOperate.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasTargetPostion) {
          MergeTargetPostion(other.TargetPostion);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_marineOperateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _marineOperateFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.status_, out unknown)) {
                result.hasStatus = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              global::CodeBattle.Vector2.Builder subBuilder = global::CodeBattle.Vector2.CreateBuilder();
              if (result.hasTargetPostion) {
                subBuilder.MergeFrom(TargetPostion);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetPostion = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::CodeBattle.Status Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::CodeBattle.Status value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = global::CodeBattle.Status.Idle;
        return this;
      }
      
      public bool HasTargetPostion {
       get { return result.hasTargetPostion; }
      }
      public global::CodeBattle.Vector2 TargetPostion {
        get { return result.TargetPostion; }
        set { SetTargetPostion(value); }
      }
      public Builder SetTargetPostion(global::CodeBattle.Vector2 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPostion = true;
        result.targetPostion_ = value;
        return this;
      }
      public Builder SetTargetPostion(global::CodeBattle.Vector2.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetPostion = true;
        result.targetPostion_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetPostion(global::CodeBattle.Vector2 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetPostion &&
            result.targetPostion_ != global::CodeBattle.Vector2.DefaultInstance) {
            result.targetPostion_ = global::CodeBattle.Vector2.CreateBuilder(result.targetPostion_).MergeFrom(value).BuildPartial();
        } else {
          result.targetPostion_ = value;
        }
        result.hasTargetPostion = true;
        return this;
      }
      public Builder ClearTargetPostion() {
        PrepareBuilder();
        result.hasTargetPostion = false;
        result.targetPostion_ = null;
        return this;
      }
    }
    static MarineOperate() {
      object.ReferenceEquals(global::CodeBattle.Api.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class JoinRoomResponse : pb::GeneratedMessage<JoinRoomResponse, JoinRoomResponse.Builder> {
    private JoinRoomResponse() { }
    private static readonly JoinRoomResponse defaultInstance = new JoinRoomResponse().MakeReadOnly();
    private static readonly string[] _joinRoomResponseFieldNames = new string[] { "id", "marines", "size" };
    private static readonly uint[] _joinRoomResponseFieldTags = new uint[] { 8, 26, 18 };
    public static JoinRoomResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override JoinRoomResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override JoinRoomResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Api.Api.internal__static_CodeBattle_Api_JoinRoomResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<JoinRoomResponse, JoinRoomResponse.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Api.Api.internal__static_CodeBattle_Api_JoinRoomResponse__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int SizeFieldNumber = 2;
    private bool hasSize;
    private global::CodeBattle.Vector2Int size_;
    public bool HasSize {
      get { return hasSize; }
    }
    public global::CodeBattle.Vector2Int Size {
      get { return size_ ?? global::CodeBattle.Vector2Int.DefaultInstance; }
    }
    
    public const int MarinesFieldNumber = 3;
    private pbc::PopsicleList<global::CodeBattle.Marine> marines_ = new pbc::PopsicleList<global::CodeBattle.Marine>();
    public scg::IList<global::CodeBattle.Marine> MarinesList {
      get { return marines_; }
    }
    public int MarinesCount {
      get { return marines_.Count; }
    }
    public global::CodeBattle.Marine GetMarines(int index) {
      return marines_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasSize) return false;
        if (!Size.IsInitialized) return false;
        foreach (global::CodeBattle.Marine element in MarinesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _joinRoomResponseFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasSize) {
        output.WriteMessage(2, field_names[2], Size);
      }
      if (marines_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], marines_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasSize) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Size);
        }
        foreach (global::CodeBattle.Marine element in MarinesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static JoinRoomResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinRoomResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinRoomResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinRoomResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinRoomResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinRoomResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static JoinRoomResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static JoinRoomResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static JoinRoomResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinRoomResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private JoinRoomResponse MakeReadOnly() {
      marines_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(JoinRoomResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<JoinRoomResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(JoinRoomResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private JoinRoomResponse result;
      
      private JoinRoomResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          JoinRoomResponse original = result;
          result = new JoinRoomResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override JoinRoomResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Api.JoinRoomResponse.Descriptor; }
      }
      
      public override JoinRoomResponse DefaultInstanceForType {
        get { return global::CodeBattle.Api.JoinRoomResponse.DefaultInstance; }
      }
      
      public override JoinRoomResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is JoinRoomResponse) {
          return MergeFrom((JoinRoomResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(JoinRoomResponse other) {
        if (other == global::CodeBattle.Api.JoinRoomResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasSize) {
          MergeSize(other.Size);
        }
        if (other.marines_.Count != 0) {
          result.marines_.Add(other.marines_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_joinRoomResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _joinRoomResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              global::CodeBattle.Vector2Int.Builder subBuilder = global::CodeBattle.Vector2Int.CreateBuilder();
              if (result.hasSize) {
                subBuilder.MergeFrom(Size);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Size = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.marines_, global::CodeBattle.Marine.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasSize {
       get { return result.hasSize; }
      }
      public global::CodeBattle.Vector2Int Size {
        get { return result.Size; }
        set { SetSize(value); }
      }
      public Builder SetSize(global::CodeBattle.Vector2Int value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSize = true;
        result.size_ = value;
        return this;
      }
      public Builder SetSize(global::CodeBattle.Vector2Int.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSize = true;
        result.size_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSize(global::CodeBattle.Vector2Int value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSize &&
            result.size_ != global::CodeBattle.Vector2Int.DefaultInstance) {
            result.size_ = global::CodeBattle.Vector2Int.CreateBuilder(result.size_).MergeFrom(value).BuildPartial();
        } else {
          result.size_ = value;
        }
        result.hasSize = true;
        return this;
      }
      public Builder ClearSize() {
        PrepareBuilder();
        result.hasSize = false;
        result.size_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::CodeBattle.Marine> MarinesList {
        get { return PrepareBuilder().marines_; }
      }
      public int MarinesCount {
        get { return result.MarinesCount; }
      }
      public global::CodeBattle.Marine GetMarines(int index) {
        return result.GetMarines(index);
      }
      public Builder SetMarines(int index, global::CodeBattle.Marine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.marines_[index] = value;
        return this;
      }
      public Builder SetMarines(int index, global::CodeBattle.Marine.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.marines_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMarines(global::CodeBattle.Marine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.marines_.Add(value);
        return this;
      }
      public Builder AddMarines(global::CodeBattle.Marine.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.marines_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMarines(scg::IEnumerable<global::CodeBattle.Marine> values) {
        PrepareBuilder();
        result.marines_.Add(values);
        return this;
      }
      public Builder ClearMarines() {
        PrepareBuilder();
        result.marines_.Clear();
        return this;
      }
    }
    static JoinRoomResponse() {
      object.ReferenceEquals(global::CodeBattle.Api.Api.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CreateMarineResponse : pb::GeneratedMessage<CreateMarineResponse, CreateMarineResponse.Builder> {
    private CreateMarineResponse() { }
    private static readonly CreateMarineResponse defaultInstance = new CreateMarineResponse().MakeReadOnly();
    private static readonly string[] _createMarineResponseFieldNames = new string[] { "marine" };
    private static readonly uint[] _createMarineResponseFieldTags = new uint[] { 10 };
    public static CreateMarineResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateMarineResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CreateMarineResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Api.Api.internal__static_CodeBattle_Api_CreateMarineResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateMarineResponse, CreateMarineResponse.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Api.Api.internal__static_CodeBattle_Api_CreateMarineResponse__FieldAccessorTable; }
    }
    
    public const int MarineFieldNumber = 1;
    private bool hasMarine;
    private global::CodeBattle.Marine marine_;
    public bool HasMarine {
      get { return hasMarine; }
    }
    public global::CodeBattle.Marine Marine {
      get { return marine_ ?? global::CodeBattle.Marine.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMarine) return false;
        if (!Marine.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _createMarineResponseFieldNames;
      if (hasMarine) {
        output.WriteMessage(1, field_names[0], Marine);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMarine) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Marine);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreateMarineResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateMarineResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateMarineResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateMarineResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateMarineResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateMarineResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateMarineResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateMarineResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateMarineResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateMarineResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CreateMarineResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateMarineResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CreateMarineResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CreateMarineResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CreateMarineResponse result;
      
      private CreateMarineResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CreateMarineResponse original = result;
          result = new CreateMarineResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CreateMarineResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Api.CreateMarineResponse.Descriptor; }
      }
      
      public override CreateMarineResponse DefaultInstanceForType {
        get { return global::CodeBattle.Api.CreateMarineResponse.DefaultInstance; }
      }
      
      public override CreateMarineResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateMarineResponse) {
          return MergeFrom((CreateMarineResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateMarineResponse other) {
        if (other == global::CodeBattle.Api.CreateMarineResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMarine) {
          MergeMarine(other.Marine);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_createMarineResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _createMarineResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::CodeBattle.Marine.Builder subBuilder = global::CodeBattle.Marine.CreateBuilder();
              if (result.hasMarine) {
                subBuilder.MergeFrom(Marine);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Marine = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMarine {
       get { return result.hasMarine; }
      }
      public global::CodeBattle.Marine Marine {
        get { return result.Marine; }
        set { SetMarine(value); }
      }
      public Builder SetMarine(global::CodeBattle.Marine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMarine = true;
        result.marine_ = value;
        return this;
      }
      public Builder SetMarine(global::CodeBattle.Marine.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMarine = true;
        result.marine_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMarine(global::CodeBattle.Marine value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMarine &&
            result.marine_ != global::CodeBattle.Marine.DefaultInstance) {
            result.marine_ = global::CodeBattle.Marine.CreateBuilder(result.marine_).MergeFrom(value).BuildPartial();
        } else {
          result.marine_ = value;
        }
        result.hasMarine = true;
        return this;
      }
      public Builder ClearMarine() {
        PrepareBuilder();
        result.hasMarine = false;
        result.marine_ = null;
        return this;
      }
    }
    static CreateMarineResponse() {
      object.ReferenceEquals(global::CodeBattle.Api.Api.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
