// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace CodeBattle {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Marine {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_CodeBattle_Vector2__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Vector2, global::CodeBattle.Vector2.Builder> internal__static_CodeBattle_Vector2__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_CodeBattle_Vector2Int__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Vector2Int, global::CodeBattle.Vector2Int.Builder> internal__static_CodeBattle_Vector2Int__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_CodeBattle_Marine__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Marine, global::CodeBattle.Marine.Builder> internal__static_CodeBattle_Marine__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static Marine() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "CgxtYXJpbmUucHJvdG8SCkNvZGVCYXR0bGUiHwoHVmVjdG9yMhIJCgF4GAEg" + 
            "AigCEgkKAXoYAiACKAIiIgoKVmVjdG9yMkludBIJCgF4GAEgAigFEgkKAXoY" + 
            "AiACKAUimAEKBk1hcmluZRIKCgJpZBgBIAIoBRIKCgJocBgCIAIoBRIlCghw" + 
            "b3NpdGlvbhgDIAIoCzITLkNvZGVCYXR0bGUuVmVjdG9yMhIiCgZzdGF0dXMY" + 
            "BCACKA4yEi5Db2RlQmF0dGxlLlN0YXR1cxIrCg50YXJnZXRQb3NpdGlvbhgF" + 
            "IAEoCzITLkNvZGVCYXR0bGUuVmVjdG9yMipACgZTdGF0dXMSCAoESWRsZRAA" + 
            "EgcKA1J1bhABEgoKBkZsYXJlcxACEg0KCUd1bkF0dGFjaxADEggKBERlYWQQ" + 
            "BA==");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_CodeBattle_Vector2__Descriptor = Descriptor.MessageTypes[0];
          internal__static_CodeBattle_Vector2__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Vector2, global::CodeBattle.Vector2.Builder>(internal__static_CodeBattle_Vector2__Descriptor,
                  new string[] { "X", "Z", });
          internal__static_CodeBattle_Vector2Int__Descriptor = Descriptor.MessageTypes[1];
          internal__static_CodeBattle_Vector2Int__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Vector2Int, global::CodeBattle.Vector2Int.Builder>(internal__static_CodeBattle_Vector2Int__Descriptor,
                  new string[] { "X", "Z", });
          internal__static_CodeBattle_Marine__Descriptor = Descriptor.MessageTypes[2];
          internal__static_CodeBattle_Marine__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::CodeBattle.Marine, global::CodeBattle.Marine.Builder>(internal__static_CodeBattle_Marine__Descriptor,
                  new string[] { "Id", "Hp", "Position", "Status", "TargetPosition", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Enums
  public enum Status {
    Idle = 0,
    Run = 1,
    Flares = 2,
    GunAttack = 3,
    Dead = 4,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Vector2 : pb::GeneratedMessage<Vector2, Vector2.Builder> {
    private Vector2() { }
    private static readonly Vector2 defaultInstance = new Vector2().MakeReadOnly();
    private static readonly string[] _vector2FieldNames = new string[] { "x", "z" };
    private static readonly uint[] _vector2FieldTags = new uint[] { 13, 21 };
    public static Vector2 DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Vector2 DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Vector2 ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Proto.Marine.internal__static_CodeBattle_Vector2__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Vector2, Vector2.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Proto.Marine.internal__static_CodeBattle_Vector2__FieldAccessorTable; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private float x_;
    public bool HasX {
      get { return hasX; }
    }
    public float X {
      get { return x_; }
    }
    
    public const int ZFieldNumber = 2;
    private bool hasZ;
    private float z_;
    public bool HasZ {
      get { return hasZ; }
    }
    public float Z {
      get { return z_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasX) return false;
        if (!hasZ) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _vector2FieldNames;
      if (hasX) {
        output.WriteFloat(1, field_names[0], X);
      }
      if (hasZ) {
        output.WriteFloat(2, field_names[1], Z);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasX) {
          size += pb::CodedOutputStream.ComputeFloatSize(1, X);
        }
        if (hasZ) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, Z);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Vector2 ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Vector2 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Vector2 ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Vector2 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Vector2 ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Vector2 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Vector2 ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Vector2 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Vector2 ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Vector2 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Vector2 MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Vector2 prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Vector2, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Vector2 cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Vector2 result;
      
      private Vector2 PrepareBuilder() {
        if (resultIsReadOnly) {
          Vector2 original = result;
          result = new Vector2();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Vector2 MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Vector2.Descriptor; }
      }
      
      public override Vector2 DefaultInstanceForType {
        get { return global::CodeBattle.Vector2.DefaultInstance; }
      }
      
      public override Vector2 BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Vector2) {
          return MergeFrom((Vector2) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Vector2 other) {
        if (other == global::CodeBattle.Vector2.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_vector2FieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _vector2FieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasX = input.ReadFloat(ref result.x_);
              break;
            }
            case 21: {
              result.hasZ = input.ReadFloat(ref result.z_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public float X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(float value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0F;
        return this;
      }
      
      public bool HasZ {
        get { return result.hasZ; }
      }
      public float Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      public Builder SetZ(float value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0F;
        return this;
      }
    }
    static Vector2() {
      object.ReferenceEquals(global::CodeBattle.Proto.Marine.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Vector2Int : pb::GeneratedMessage<Vector2Int, Vector2Int.Builder> {
    private Vector2Int() { }
    private static readonly Vector2Int defaultInstance = new Vector2Int().MakeReadOnly();
    private static readonly string[] _vector2IntFieldNames = new string[] { "x", "z" };
    private static readonly uint[] _vector2IntFieldTags = new uint[] { 8, 16 };
    public static Vector2Int DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Vector2Int DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Vector2Int ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Proto.Marine.internal__static_CodeBattle_Vector2Int__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Vector2Int, Vector2Int.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Proto.Marine.internal__static_CodeBattle_Vector2Int__FieldAccessorTable; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private int x_;
    public bool HasX {
      get { return hasX; }
    }
    public int X {
      get { return x_; }
    }
    
    public const int ZFieldNumber = 2;
    private bool hasZ;
    private int z_;
    public bool HasZ {
      get { return hasZ; }
    }
    public int Z {
      get { return z_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasX) return false;
        if (!hasZ) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _vector2IntFieldNames;
      if (hasX) {
        output.WriteInt32(1, field_names[0], X);
      }
      if (hasZ) {
        output.WriteInt32(2, field_names[1], Z);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasX) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, X);
        }
        if (hasZ) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Z);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Vector2Int ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Vector2Int ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Vector2Int ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Vector2Int ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Vector2Int ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Vector2Int ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Vector2Int ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Vector2Int ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Vector2Int ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Vector2Int ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Vector2Int MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Vector2Int prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Vector2Int, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Vector2Int cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Vector2Int result;
      
      private Vector2Int PrepareBuilder() {
        if (resultIsReadOnly) {
          Vector2Int original = result;
          result = new Vector2Int();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Vector2Int MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Vector2Int.Descriptor; }
      }
      
      public override Vector2Int DefaultInstanceForType {
        get { return global::CodeBattle.Vector2Int.DefaultInstance; }
      }
      
      public override Vector2Int BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Vector2Int) {
          return MergeFrom((Vector2Int) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Vector2Int other) {
        if (other == global::CodeBattle.Vector2Int.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_vector2IntFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _vector2IntFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasX = input.ReadInt32(ref result.x_);
              break;
            }
            case 16: {
              result.hasZ = input.ReadInt32(ref result.z_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public int X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(int value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      public bool HasZ {
        get { return result.hasZ; }
      }
      public int Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      public Builder SetZ(int value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0;
        return this;
      }
    }
    static Vector2Int() {
      object.ReferenceEquals(global::CodeBattle.Proto.Marine.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Marine : pb::GeneratedMessage<Marine, Marine.Builder> {
    private Marine() { }
    private static readonly Marine defaultInstance = new Marine().MakeReadOnly();
    private static readonly string[] _marineFieldNames = new string[] { "hp", "id", "position", "status", "targetPosition" };
    private static readonly uint[] _marineFieldTags = new uint[] { 16, 8, 26, 32, 42 };
    public static Marine DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Marine DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Marine ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CodeBattle.Proto.Marine.internal__static_CodeBattle_Marine__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Marine, Marine.Builder> InternalFieldAccessors {
      get { return global::CodeBattle.Proto.Marine.internal__static_CodeBattle_Marine__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int HpFieldNumber = 2;
    private bool hasHp;
    private int hp_;
    public bool HasHp {
      get { return hasHp; }
    }
    public int Hp {
      get { return hp_; }
    }
    
    public const int PositionFieldNumber = 3;
    private bool hasPosition;
    private global::CodeBattle.Vector2 position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::CodeBattle.Vector2 Position {
      get { return position_ ?? global::CodeBattle.Vector2.DefaultInstance; }
    }
    
    public const int StatusFieldNumber = 4;
    private bool hasStatus;
    private global::CodeBattle.Status status_ = global::CodeBattle.Status.Idle;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::CodeBattle.Status Status {
      get { return status_; }
    }
    
    public const int TargetPositionFieldNumber = 5;
    private bool hasTargetPosition;
    private global::CodeBattle.Vector2 targetPosition_;
    public bool HasTargetPosition {
      get { return hasTargetPosition; }
    }
    public global::CodeBattle.Vector2 TargetPosition {
      get { return targetPosition_ ?? global::CodeBattle.Vector2.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasHp) return false;
        if (!hasPosition) return false;
        if (!hasStatus) return false;
        if (!Position.IsInitialized) return false;
        if (HasTargetPosition) {
          if (!TargetPosition.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _marineFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (hasHp) {
        output.WriteInt32(2, field_names[0], Hp);
      }
      if (hasPosition) {
        output.WriteMessage(3, field_names[2], Position);
      }
      if (hasStatus) {
        output.WriteEnum(4, field_names[3], (int) Status, Status);
      }
      if (hasTargetPosition) {
        output.WriteMessage(5, field_names[4], TargetPosition);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasHp) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Hp);
        }
        if (hasPosition) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Position);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Status);
        }
        if (hasTargetPosition) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, TargetPosition);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Marine ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Marine ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Marine ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Marine ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Marine ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Marine ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Marine ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Marine ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Marine ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Marine ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Marine MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Marine prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Marine, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Marine cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Marine result;
      
      private Marine PrepareBuilder() {
        if (resultIsReadOnly) {
          Marine original = result;
          result = new Marine();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Marine MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CodeBattle.Marine.Descriptor; }
      }
      
      public override Marine DefaultInstanceForType {
        get { return global::CodeBattle.Marine.DefaultInstance; }
      }
      
      public override Marine BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Marine) {
          return MergeFrom((Marine) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Marine other) {
        if (other == global::CodeBattle.Marine.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasHp) {
          Hp = other.Hp;
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasTargetPosition) {
          MergeTargetPosition(other.TargetPosition);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_marineFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _marineFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasHp = input.ReadInt32(ref result.hp_);
              break;
            }
            case 26: {
              global::CodeBattle.Vector2.Builder subBuilder = global::CodeBattle.Vector2.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.status_, out unknown)) {
                result.hasStatus = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
            case 42: {
              global::CodeBattle.Vector2.Builder subBuilder = global::CodeBattle.Vector2.CreateBuilder();
              if (result.hasTargetPosition) {
                subBuilder.MergeFrom(TargetPosition);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetPosition = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasHp {
        get { return result.hasHp; }
      }
      public int Hp {
        get { return result.Hp; }
        set { SetHp(value); }
      }
      public Builder SetHp(int value) {
        PrepareBuilder();
        result.hasHp = true;
        result.hp_ = value;
        return this;
      }
      public Builder ClearHp() {
        PrepareBuilder();
        result.hasHp = false;
        result.hp_ = 0;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::CodeBattle.Vector2 Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::CodeBattle.Vector2 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::CodeBattle.Vector2.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::CodeBattle.Vector2 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::CodeBattle.Vector2.DefaultInstance) {
            result.position_ = global::CodeBattle.Vector2.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::CodeBattle.Status Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::CodeBattle.Status value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = global::CodeBattle.Status.Idle;
        return this;
      }
      
      public bool HasTargetPosition {
       get { return result.hasTargetPosition; }
      }
      public global::CodeBattle.Vector2 TargetPosition {
        get { return result.TargetPosition; }
        set { SetTargetPosition(value); }
      }
      public Builder SetTargetPosition(global::CodeBattle.Vector2 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = value;
        return this;
      }
      public Builder SetTargetPosition(global::CodeBattle.Vector2.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetPosition = true;
        result.targetPosition_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetPosition(global::CodeBattle.Vector2 value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetPosition &&
            result.targetPosition_ != global::CodeBattle.Vector2.DefaultInstance) {
            result.targetPosition_ = global::CodeBattle.Vector2.CreateBuilder(result.targetPosition_).MergeFrom(value).BuildPartial();
        } else {
          result.targetPosition_ = value;
        }
        result.hasTargetPosition = true;
        return this;
      }
      public Builder ClearTargetPosition() {
        PrepareBuilder();
        result.hasTargetPosition = false;
        result.targetPosition_ = null;
        return this;
      }
    }
    static Marine() {
      object.ReferenceEquals(global::CodeBattle.Proto.Marine.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
